
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  08003d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00001e50  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001ecc  20001ecc  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010669  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029cc  00000000  00000000  00030713  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d90  00000000  00000000  000330e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c28  00000000  00000000  00033e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000662e  00000000  00000000  00034a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004891  00000000  00000000  0003b0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003f957  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003804  00000000  00000000  0003f9d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d10 	.word	0x08003d10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08003d10 	.word	0x08003d10

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	20001ca8 	.word	0x20001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000098 	.word	0x20000098
 8000530:	2000009c 	.word	0x2000009c
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 f902 	bl	8001828 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	20001ca8 	.word	0x20001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 f81e 	bl	80016b0 <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000014 	.word	0x20000014
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000098 	.word	0x20000098
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	2000009c 	.word	0x2000009c

08000760 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	3308      	adds	r3, #8
 800077e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000780:	f000 fedc 	bl	800153c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <pvPortMalloc+0x88>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <pvPortMalloc+0x8c>)
 800078e:	f023 0307 	bic.w	r3, r3, #7
 8000792:	461a      	mov	r2, r3
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <pvPortMalloc+0x88>)
 8000796:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <pvPortMalloc+0x90>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d813      	bhi.n	80007d0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <pvPortMalloc+0x90>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	441a      	add	r2, r3
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <pvPortMalloc+0x90>)
 80007b2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d90b      	bls.n	80007d0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <pvPortMalloc+0x88>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <pvPortMalloc+0x90>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <pvPortMalloc+0x90>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <pvPortMalloc+0x90>)
 80007ce:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007d0:	f000 fec2 	bl	8001558 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80007da:	f003 f83d 	bl	8003858 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20001ca4 	.word	0x20001ca4
 80007ec:	200000a8 	.word	0x200000a8
 80007f0:	20001ca0 	.word	0x20001ca0

080007f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d009      	beq.n	8000816 <vPortFree+0x22>
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e7fe      	b.n	8000814 <vPortFree+0x20>
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <xPortGetFreeHeapSize+0x18>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8000830:	3318      	adds	r3, #24
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20001ca0 	.word	0x20001ca0

08000840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d109      	bne.n	8000868 <xQueueGenericReset+0x28>
 8000854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000858:	f383 8811 	msr	BASEPRI, r3
 800085c:	f3bf 8f6f 	isb	sy
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	e7fe      	b.n	8000866 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000868:	f7ff fe6a 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000874:	68f9      	ldr	r1, [r7, #12]
 8000876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000878:	fb01 f303 	mul.w	r3, r1, r3
 800087c:	441a      	add	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000898:	3b01      	subs	r3, #1
 800089a:	68f9      	ldr	r1, [r7, #12]
 800089c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800089e:	fb01 f303 	mul.w	r3, r1, r3
 80008a2:	441a      	add	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d114      	bne.n	80008e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d01a      	beq.n	80008fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3310      	adds	r3, #16
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 f87a 	bl	80019c4 <xTaskRemoveFromEventList>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d012      	beq.n	80008fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <xQueueGenericReset+0xcc>)
 80008d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	f3bf 8f4f 	dsb	sy
 80008e2:	f3bf 8f6f 	isb	sy
 80008e6:	e009      	b.n	80008fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3310      	adds	r3, #16
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc6f 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3324      	adds	r3, #36	; 0x24
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc6a 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80008fc:	f7ff fe4e 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000900:	2301      	movs	r3, #1
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000ed04 	.word	0xe000ed04

08000910 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af02      	add	r7, sp, #8
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d109      	bne.n	8000938 <xQueueGenericCreate+0x28>
 8000924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000928:	f383 8811 	msr	BASEPRI, r3
 800092c:	f3bf 8f6f 	isb	sy
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	e7fe      	b.n	8000936 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
 8000942:	e004      	b.n	800094e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3348      	adds	r3, #72	; 0x48
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff04 	bl	8000760 <pvPortMalloc>
 8000958:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00b      	beq.n	8000978 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	3348      	adds	r3, #72	; 0x48
 8000964:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	4613      	mov	r3, r2
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f000 f805 	bl	8000982 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000978:	69bb      	ldr	r3, [r7, #24]
	}
 800097a:	4618      	mov	r0, r3
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	e002      	b.n	80009a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80009b0:	2101      	movs	r1, #1
 80009b2:	69b8      	ldr	r0, [r7, #24]
 80009b4:	f7ff ff44 	bl	8000840 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80009d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d109      	bne.n	80009f0 <xQueueGenericSend+0x30>
 80009dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009e0:	f383 8811 	msr	BASEPRI, r3
 80009e4:	f3bf 8f6f 	isb	sy
 80009e8:	f3bf 8f4f 	dsb	sy
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ee:	e7fe      	b.n	80009ee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <xQueueGenericSend+0x3e>
 80009f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <xQueueGenericSend+0x42>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <xQueueGenericSend+0x44>
 8000a02:	2300      	movs	r3, #0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d109      	bne.n	8000a1c <xQueueGenericSend+0x5c>
 8000a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0c:	f383 8811 	msr	BASEPRI, r3
 8000a10:	f3bf 8f6f 	isb	sy
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1a:	e7fe      	b.n	8000a1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d103      	bne.n	8000a2a <xQueueGenericSend+0x6a>
 8000a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d101      	bne.n	8000a2e <xQueueGenericSend+0x6e>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <xQueueGenericSend+0x70>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d109      	bne.n	8000a48 <xQueueGenericSend+0x88>
 8000a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a38:	f383 8811 	msr	BASEPRI, r3
 8000a3c:	f3bf 8f6f 	isb	sy
 8000a40:	f3bf 8f4f 	dsb	sy
 8000a44:	623b      	str	r3, [r7, #32]
 8000a46:	e7fe      	b.n	8000a46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a48:	f001 f978 	bl	8001d3c <xTaskGetSchedulerState>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <xQueueGenericSend+0x98>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <xQueueGenericSend+0x9c>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e000      	b.n	8000a5e <xQueueGenericSend+0x9e>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d109      	bne.n	8000a76 <xQueueGenericSend+0xb6>
 8000a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a66:	f383 8811 	msr	BASEPRI, r3
 8000a6a:	f3bf 8f6f 	isb	sy
 8000a6e:	f3bf 8f4f 	dsb	sy
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	e7fe      	b.n	8000a74 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000a76:	f7ff fd63 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d302      	bcc.n	8000a8c <xQueueGenericSend+0xcc>
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d129      	bne.n	8000ae0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	68b9      	ldr	r1, [r7, #8]
 8000a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a92:	f000 fa35 	bl	8000f00 <prvCopyDataToQueue>
 8000a96:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d010      	beq.n	8000ac2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa2:	3324      	adds	r3, #36	; 0x24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 ff8d 	bl	80019c4 <xTaskRemoveFromEventList>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000ab0:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <xQueueGenericSend+0x1f0>)
 8000ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	f3bf 8f6f 	isb	sy
 8000ac0:	e00a      	b.n	8000ad8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000ac8:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <xQueueGenericSend+0x1f0>)
 8000aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	f3bf 8f4f 	dsb	sy
 8000ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ad8:	f7ff fd60 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e063      	b.n	8000ba8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ae6:	f7ff fd59 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e05c      	b.n	8000ba8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d106      	bne.n	8000b02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 ffc5 	bl	8001a88 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000b02:	f7ff fd4b 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000b06:	f000 fd19 	bl	800153c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000b0a:	f7ff fd19 	bl	8000540 <vPortEnterCritical>
 8000b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1a:	d103      	bne.n	8000b24 <xQueueGenericSend+0x164>
 8000b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d103      	bne.n	8000b3a <xQueueGenericSend+0x17a>
 8000b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b3a:	f7ff fd2f 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b3e:	1d3a      	adds	r2, r7, #4
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 ffc2 	bl	8001ad0 <xTaskCheckForTimeOut>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d124      	bne.n	8000b9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b54:	f000 facc 	bl	80010f0 <prvIsQueueFull>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d018      	beq.n	8000b90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b60:	3310      	adds	r3, #16
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fede 	bl	8001928 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b6e:	f000 fa57 	bl	8001020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000b72:	f000 fcf1 	bl	8001558 <xTaskResumeAll>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f47f af7c 	bne.w	8000a76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <xQueueGenericSend+0x1f0>)
 8000b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	f3bf 8f4f 	dsb	sy
 8000b8a:	f3bf 8f6f 	isb	sy
 8000b8e:	e772      	b.n	8000a76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b92:	f000 fa45 	bl	8001020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b96:	f000 fcdf 	bl	8001558 <xTaskResumeAll>
 8000b9a:	e76c      	b.n	8000a76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b9e:	f000 fa3f 	bl	8001020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ba2:	f000 fcd9 	bl	8001558 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000ba6:	2300      	movs	r3, #0
		}
	}
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3738      	adds	r7, #56	; 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	e000ed04 	.word	0xe000ed04

08000bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <xQueueGenericSendFromISR+0x2c>
 8000bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd0:	f383 8811 	msr	BASEPRI, r3
 8000bd4:	f3bf 8f6f 	isb	sy
 8000bd8:	f3bf 8f4f 	dsb	sy
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8000bde:	e7fe      	b.n	8000bde <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d103      	bne.n	8000bee <xQueueGenericSendFromISR+0x3a>
 8000be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <xQueueGenericSendFromISR+0x3e>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <xQueueGenericSendFromISR+0x40>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <xQueueGenericSendFromISR+0x58>
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	623b      	str	r3, [r7, #32]
 8000c0a:	e7fe      	b.n	8000c0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d103      	bne.n	8000c1a <xQueueGenericSendFromISR+0x66>
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d101      	bne.n	8000c1e <xQueueGenericSendFromISR+0x6a>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <xQueueGenericSendFromISR+0x6c>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <xQueueGenericSendFromISR+0x84>
 8000c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c28:	f383 8811 	msr	BASEPRI, r3
 8000c2c:	f3bf 8f6f 	isb	sy
 8000c30:	f3bf 8f4f 	dsb	sy
 8000c34:	61fb      	str	r3, [r7, #28]
 8000c36:	e7fe      	b.n	8000c36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c38:	f7ff fd54 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000c3c:	f3ef 8211 	mrs	r2, BASEPRI
 8000c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c44:	f383 8811 	msr	BASEPRI, r3
 8000c48:	f3bf 8f6f 	isb	sy
 8000c4c:	f3bf 8f4f 	dsb	sy
 8000c50:	61ba      	str	r2, [r7, #24]
 8000c52:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000c54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d302      	bcc.n	8000c6a <xQueueGenericSendFromISR+0xb6>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d12c      	bne.n	8000cc4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c7a:	f000 f941 	bl	8000f00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c86:	d112      	bne.n	8000cae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d016      	beq.n	8000cbe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c92:	3324      	adds	r3, #36	; 0x24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fe95 	bl	80019c4 <xTaskRemoveFromEventList>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d00e      	beq.n	8000cbe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00b      	beq.n	8000cbe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e007      	b.n	8000cbe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	b25a      	sxtb	r2, r3
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000cc2:	e001      	b.n	8000cc8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8000cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cca:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3738      	adds	r7, #56	; 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d109      	bne.n	8000d0c <xQueueGenericReceive+0x30>
	__asm volatile
 8000cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cfc:	f383 8811 	msr	BASEPRI, r3
 8000d00:	f3bf 8f6f 	isb	sy
 8000d04:	f3bf 8f4f 	dsb	sy
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
 8000d0a:	e7fe      	b.n	8000d0a <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d103      	bne.n	8000d1a <xQueueGenericReceive+0x3e>
 8000d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <xQueueGenericReceive+0x42>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e000      	b.n	8000d20 <xQueueGenericReceive+0x44>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d109      	bne.n	8000d38 <xQueueGenericReceive+0x5c>
 8000d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	623b      	str	r3, [r7, #32]
 8000d36:	e7fe      	b.n	8000d36 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d38:	f001 f800 	bl	8001d3c <xTaskGetSchedulerState>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <xQueueGenericReceive+0x6c>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <xQueueGenericReceive+0x70>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <xQueueGenericReceive+0x72>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d109      	bne.n	8000d66 <xQueueGenericReceive+0x8a>
 8000d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d56:	f383 8811 	msr	BASEPRI, r3
 8000d5a:	f3bf 8f6f 	isb	sy
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	e7fe      	b.n	8000d64 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d66:	f7ff fbeb 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d046      	beq.n	8000e04 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d80:	f000 f928 	bl	8000fd4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d121      	bne.n	8000dce <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d104      	bne.n	8000da4 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000d9a:	f001 f8e7 	bl	8001f6c <pvTaskIncrementMutexHeldCount>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d027      	beq.n	8000dfc <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dae:	3310      	adds	r3, #16
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fe07 	bl	80019c4 <xTaskRemoveFromEventList>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d01f      	beq.n	8000dfc <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <xQueueGenericReceive+0x220>)
 8000dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	f3bf 8f4f 	dsb	sy
 8000dc8:	f3bf 8f6f 	isb	sy
 8000dcc:	e016      	b.n	8000dfc <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dd2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00f      	beq.n	8000dfc <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dde:	3324      	adds	r3, #36	; 0x24
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fdef 	bl	80019c4 <xTaskRemoveFromEventList>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d007      	beq.n	8000dfc <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000dec:	4b43      	ldr	r3, [pc, #268]	; (8000efc <xQueueGenericReceive+0x220>)
 8000dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	f3bf 8f4f 	dsb	sy
 8000df8:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000dfc:	f7ff fbce 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e077      	b.n	8000ef4 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d103      	bne.n	8000e12 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e0a:	f7ff fbc7 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e070      	b.n	8000ef4 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d106      	bne.n	8000e26 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fe33 	bl	8001a88 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e22:	2301      	movs	r3, #1
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e26:	f7ff fbb9 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e2a:	f000 fb87 	bl	800153c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e2e:	f7ff fb87 	bl	8000540 <vPortEnterCritical>
 8000e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3e:	d103      	bne.n	8000e48 <xQueueGenericReceive+0x16c>
 8000e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d103      	bne.n	8000e5e <xQueueGenericReceive+0x182>
 8000e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e5e:	f7ff fb9d 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e62:	1d3a      	adds	r2, r7, #4
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fe30 	bl	8001ad0 <xTaskCheckForTimeOut>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d131      	bne.n	8000eda <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e78:	f000 f924 	bl	80010c4 <prvIsQueueEmpty>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d025      	beq.n	8000ece <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d108      	bne.n	8000e9c <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8000e8a:	f7ff fb59 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 ff70 	bl	8001d78 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000e98:	f7ff fb80 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e9e:	3324      	adds	r3, #36	; 0x24
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fd3f 	bl	8001928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eac:	f000 f8b8 	bl	8001020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000eb0:	f000 fb52 	bl	8001558 <xTaskResumeAll>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f47f af55 	bne.w	8000d66 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <xQueueGenericReceive+0x220>)
 8000ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	f3bf 8f4f 	dsb	sy
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	e74b      	b.n	8000d66 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ed0:	f000 f8a6 	bl	8001020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000ed4:	f000 fb40 	bl	8001558 <xTaskResumeAll>
 8000ed8:	e745      	b.n	8000d66 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000edc:	f000 f8a0 	bl	8001020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ee0:	f000 fb3a 	bl	8001558 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ee6:	f000 f8ed 	bl	80010c4 <prvIsQueueEmpty>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f43f af3a 	beq.w	8000d66 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000ef2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3738      	adds	r7, #56	; 0x38
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	e000ed04 	.word	0xe000ed04

08000f00 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10d      	bne.n	8000f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d14d      	bne.n	8000fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 ff9a 	bl	8001e64 <xTaskPriorityDisinherit>
 8000f30:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	e043      	b.n	8000fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d119      	bne.n	8000f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6898      	ldr	r0, [r3, #8]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	f002 fdd0 	bl	8003af0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	441a      	add	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d32b      	bcc.n	8000fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	e026      	b.n	8000fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	68d8      	ldr	r0, [r3, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	f002 fdb6 	bl	8003af0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	425b      	negs	r3, r3
 8000f8e:	441a      	add	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	425b      	negs	r3, r3
 8000faa:	441a      	add	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d105      	bne.n	8000fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000fca:	697b      	ldr	r3, [r7, #20]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d018      	beq.n	8001018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	441a      	add	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d303      	bcc.n	8001008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68d9      	ldr	r1, [r3, #12]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	461a      	mov	r2, r3
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f002 fd6c 	bl	8003af0 <memcpy>
	}
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001028:	f7ff fa8a 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001034:	e011      	b.n	800105a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	2b00      	cmp	r3, #0
 800103c:	d012      	beq.n	8001064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3324      	adds	r3, #36	; 0x24
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fcbe 	bl	80019c4 <xTaskRemoveFromEventList>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800104e:	f000 fd9d 	bl	8001b8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	3b01      	subs	r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dce9      	bgt.n	8001036 <prvUnlockQueue+0x16>
 8001062:	e000      	b.n	8001066 <prvUnlockQueue+0x46>
					break;
 8001064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	22ff      	movs	r2, #255	; 0xff
 800106a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800106e:	f7ff fa95 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001072:	f7ff fa65 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800107c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800107e:	e011      	b.n	80010a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d012      	beq.n	80010ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3310      	adds	r3, #16
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fc99 	bl	80019c4 <xTaskRemoveFromEventList>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001098:	f000 fd78 	bl	8001b8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	3b01      	subs	r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80010a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	dce9      	bgt.n	8001080 <prvUnlockQueue+0x60>
 80010ac:	e000      	b.n	80010b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80010ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80010b8:	f7ff fa70 	bl	800059c <vPortExitCritical>
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80010cc:	f7ff fa38 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80010d8:	2301      	movs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e001      	b.n	80010e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80010e2:	f7ff fa5b 	bl	800059c <vPortExitCritical>

	return xReturn;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80010f8:	f7ff fa22 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001104:	429a      	cmp	r2, r3
 8001106:	d102      	bne.n	800110e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001108:	2301      	movs	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e001      	b.n	8001112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001112:	f7ff fa43 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e014      	b.n	800115a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <vQueueAddToRegistry+0x4c>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10b      	bne.n	8001154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800113c:	490b      	ldr	r1, [pc, #44]	; (800116c <vQueueAddToRegistry+0x4c>)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <vQueueAddToRegistry+0x4c>)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001152:	e005      	b.n	8001160 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b07      	cmp	r3, #7
 800115e:	d9e7      	bls.n	8001130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	20001df4 	.word	0x20001df4

08001170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001180:	f7ff f9de 	bl	8000540 <vPortEnterCritical>
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800118a:	b25b      	sxtb	r3, r3
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d103      	bne.n	800119a <vQueueWaitForMessageRestricted+0x2a>
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a6:	d103      	bne.n	80011b0 <vQueueWaitForMessageRestricted+0x40>
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011b0:	f7ff f9f4 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d106      	bne.n	80011ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3324      	adds	r3, #36	; 0x24
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fbd3 	bl	8001970 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff28 	bl	8001020 <prvUnlockQueue>
	}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af04      	add	r7, sp, #16
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fab7 	bl	8000760 <pvPortMalloc>
 80011f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00e      	beq.n	8001218 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80011fa:	2050      	movs	r0, #80	; 0x50
 80011fc:	f7ff fab0 	bl	8000760 <pvPortMalloc>
 8001200:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
 800120e:	e005      	b.n	800121c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001210:	6978      	ldr	r0, [r7, #20]
 8001212:	f7ff faef 	bl	80007f4 <vPortFree>
 8001216:	e001      	b.n	800121c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d013      	beq.n	800124a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	2300      	movs	r3, #0
 8001226:	9303      	str	r3, [sp, #12]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f000 f80e 	bl	800125a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800123e:	69f8      	ldr	r0, [r7, #28]
 8001240:	f000 f892 	bl	8001368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001244:	2301      	movs	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	e002      	b.n	8001250 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001250:	69bb      	ldr	r3, [r7, #24]
	}
 8001252:	4618      	mov	r0, r3
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	461a      	mov	r2, r3
 8001272:	21a5      	movs	r1, #165	; 0xa5
 8001274:	f002 fc47 	bl	8003b06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001282:	3b01      	subs	r3, #1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	f023 0307 	bic.w	r3, r3, #7
 8001290:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	2b00      	cmp	r3, #0
 800129a:	d009      	beq.n	80012b0 <prvInitialiseNewTask+0x56>
 800129c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a0:	f383 8811 	msr	BASEPRI, r3
 80012a4:	f3bf 8f6f 	isb	sy
 80012a8:	f3bf 8f4f 	dsb	sy
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e7fe      	b.n	80012ae <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	e012      	b.n	80012dc <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	4413      	add	r3, r2
 80012bc:	7819      	ldrb	r1, [r3, #0]
 80012be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	3334      	adds	r3, #52	; 0x34
 80012c6:	460a      	mov	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b09      	cmp	r3, #9
 80012e0:	d9e9      	bls.n	80012b6 <prvInitialiseNewTask+0x5c>
 80012e2:	e000      	b.n	80012e6 <prvInitialiseNewTask+0x8c>
		{
			break;
 80012e4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d901      	bls.n	80012f8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012f4:	2304      	movs	r3, #4
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80012fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130c:	3304      	adds	r3, #4
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff7e 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001316:	3318      	adds	r3, #24
 8001318:	4618      	mov	r0, r3
 800131a:	f7fe ff79 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800131e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001322:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	f1c3 0205 	rsb	r2, r3, #5
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800132e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	2200      	movs	r2, #0
 8001338:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133c:	2200      	movs	r2, #0
 800133e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	68f9      	ldr	r1, [r7, #12]
 8001346:	69b8      	ldr	r0, [r7, #24]
 8001348:	f7fe fff6 	bl	8000338 <pxPortInitialiseStack>
 800134c:	4602      	mov	r2, r0
 800134e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001350:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800135c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800135e:	bf00      	nop
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001370:	f7ff f8e6 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <prvAddNewTaskToReadyList+0xb8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a29      	ldr	r2, [pc, #164]	; (8001420 <prvAddNewTaskToReadyList+0xb8>)
 800137c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <prvAddNewTaskToReadyList+0xbc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001386:	4a27      	ldr	r2, [pc, #156]	; (8001424 <prvAddNewTaskToReadyList+0xbc>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <prvAddNewTaskToReadyList+0xb8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d110      	bne.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001394:	f000 fc20 	bl	8001bd8 <prvInitialiseTaskLists>
 8001398:	e00d      	b.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <prvAddNewTaskToReadyList+0xc0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <prvAddNewTaskToReadyList+0xbc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d802      	bhi.n	80013b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <prvAddNewTaskToReadyList+0xbc>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <prvAddNewTaskToReadyList+0xc4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a1b      	ldr	r2, [pc, #108]	; (800142c <prvAddNewTaskToReadyList+0xc4>)
 80013be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	2201      	movs	r2, #1
 80013c6:	409a      	lsls	r2, r3
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <prvAddNewTaskToReadyList+0xc8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <prvAddNewTaskToReadyList+0xc8>)
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <prvAddNewTaskToReadyList+0xcc>)
 80013e0:	441a      	add	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3304      	adds	r3, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4610      	mov	r0, r2
 80013ea:	f7fe ff1e 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80013ee:	f7ff f8d5 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <prvAddNewTaskToReadyList+0xc0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00e      	beq.n	8001418 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <prvAddNewTaskToReadyList+0xbc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <prvAddNewTaskToReadyList+0xd0>)
 800140a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	f3bf 8f4f 	dsb	sy
 8001414:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20001d80 	.word	0x20001d80
 8001424:	20001ca8 	.word	0x20001ca8
 8001428:	20001d8c 	.word	0x20001d8c
 800142c:	20001d9c 	.word	0x20001d9c
 8001430:	20001d88 	.word	0x20001d88
 8001434:	20001cac 	.word	0x20001cac
 8001438:	e000ed04 	.word	0xe000ed04

0800143c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d016      	beq.n	800147c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <vTaskDelay+0x60>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <vTaskDelay+0x2e>
 8001456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145a:	f383 8811 	msr	BASEPRI, r3
 800145e:	f3bf 8f6f 	isb	sy
 8001462:	f3bf 8f4f 	dsb	sy
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	e7fe      	b.n	8001468 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800146a:	f000 f867 	bl	800153c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800146e:	2100      	movs	r1, #0
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 fd8f 	bl	8001f94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001476:	f000 f86f 	bl	8001558 <xTaskResumeAll>
 800147a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d107      	bne.n	8001492 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <vTaskDelay+0x64>)
 8001484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20001da8 	.word	0x20001da8
 80014a0:	e000ed04 	.word	0xe000ed04

080014a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <vTaskStartScheduler+0x80>)
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	2300      	movs	r3, #0
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2300      	movs	r3, #0
 80014b4:	2282      	movs	r2, #130	; 0x82
 80014b6:	491c      	ldr	r1, [pc, #112]	; (8001528 <vTaskStartScheduler+0x84>)
 80014b8:	481c      	ldr	r0, [pc, #112]	; (800152c <vTaskStartScheduler+0x88>)
 80014ba:	f7ff fe8d 	bl	80011d8 <xTaskCreate>
 80014be:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d102      	bne.n	80014cc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80014c6:	f000 fdcb 	bl	8002060 <xTimerCreateTimerTask>
 80014ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d115      	bne.n	80014fe <vTaskStartScheduler+0x5a>
 80014d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d6:	f383 8811 	msr	BASEPRI, r3
 80014da:	f3bf 8f6f 	isb	sy
 80014de:	f3bf 8f4f 	dsb	sy
 80014e2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <vTaskStartScheduler+0x8c>)
 80014e6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <vTaskStartScheduler+0x90>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <vTaskStartScheduler+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80014f8:	f7fe ff96 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80014fc:	e00d      	b.n	800151a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d109      	bne.n	800151a <vTaskStartScheduler+0x76>
 8001506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150a:	f383 8811 	msr	BASEPRI, r3
 800150e:	f3bf 8f6f 	isb	sy
 8001512:	f3bf 8f4f 	dsb	sy
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	e7fe      	b.n	8001518 <vTaskStartScheduler+0x74>
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20001da4 	.word	0x20001da4
 8001528:	08003c7c 	.word	0x08003c7c
 800152c:	08001ba5 	.word	0x08001ba5
 8001530:	20001da0 	.word	0x20001da0
 8001534:	20001d8c 	.word	0x20001d8c
 8001538:	20001d84 	.word	0x20001d84

0800153c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <vTaskSuspendAll+0x18>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a03      	ldr	r2, [pc, #12]	; (8001554 <vTaskSuspendAll+0x18>)
 8001548:	6013      	str	r3, [r2, #0]
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	20001da8 	.word	0x20001da8

08001558 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <xTaskResumeAll+0x114>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <xTaskResumeAll+0x2a>
 800156e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001572:	f383 8811 	msr	BASEPRI, r3
 8001576:	f3bf 8f6f 	isb	sy
 800157a:	f3bf 8f4f 	dsb	sy
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	e7fe      	b.n	8001580 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001582:	f7fe ffdd 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <xTaskResumeAll+0x114>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3b01      	subs	r3, #1
 800158c:	4a37      	ldr	r2, [pc, #220]	; (800166c <xTaskResumeAll+0x114>)
 800158e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001590:	4b36      	ldr	r3, [pc, #216]	; (800166c <xTaskResumeAll+0x114>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d161      	bne.n	800165c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001598:	4b35      	ldr	r3, [pc, #212]	; (8001670 <xTaskResumeAll+0x118>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d05d      	beq.n	800165c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015a0:	e02e      	b.n	8001600 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <xTaskResumeAll+0x11c>)
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3318      	adds	r3, #24
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fe98 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3304      	adds	r3, #4
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe fe93 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	2201      	movs	r2, #1
 80015c4:	409a      	lsls	r2, r3
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <xTaskResumeAll+0x120>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <xTaskResumeAll+0x120>)
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4a27      	ldr	r2, [pc, #156]	; (800167c <xTaskResumeAll+0x124>)
 80015de:	441a      	add	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3304      	adds	r3, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4610      	mov	r0, r2
 80015e8:	f7fe fe1f 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <xTaskResumeAll+0x128>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d302      	bcc.n	8001600 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <xTaskResumeAll+0x12c>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <xTaskResumeAll+0x11c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1cc      	bne.n	80015a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800160e:	f000 fb6f 	bl	8001cf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <xTaskResumeAll+0x130>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d010      	beq.n	8001640 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800161e:	f000 f847 	bl	80016b0 <xTaskIncrementTick>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <xTaskResumeAll+0x12c>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3b01      	subs	r3, #1
 8001632:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f1      	bne.n	800161e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <xTaskResumeAll+0x130>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <xTaskResumeAll+0x12c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001648:	2301      	movs	r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <xTaskResumeAll+0x134>)
 800164e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f3bf 8f4f 	dsb	sy
 8001658:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800165c:	f7fe ff9e 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001660:	68bb      	ldr	r3, [r7, #8]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20001da8 	.word	0x20001da8
 8001670:	20001d80 	.word	0x20001d80
 8001674:	20001d40 	.word	0x20001d40
 8001678:	20001d88 	.word	0x20001d88
 800167c:	20001cac 	.word	0x20001cac
 8001680:	20001ca8 	.word	0x20001ca8
 8001684:	20001d94 	.word	0x20001d94
 8001688:	20001d90 	.word	0x20001d90
 800168c:	e000ed04 	.word	0xe000ed04

08001690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <xTaskGetTickCount+0x1c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20001d84 	.word	0x20001d84

080016b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016ba:	4b50      	ldr	r3, [pc, #320]	; (80017fc <xTaskIncrementTick+0x14c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 808c 	bne.w	80017dc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80016c4:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <xTaskIncrementTick+0x150>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80016cc:	4a4c      	ldr	r2, [pc, #304]	; (8001800 <xTaskIncrementTick+0x150>)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d11f      	bne.n	8001718 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <xTaskIncrementTick+0x154>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <xTaskIncrementTick+0x46>
 80016e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e6:	f383 8811 	msr	BASEPRI, r3
 80016ea:	f3bf 8f6f 	isb	sy
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	e7fe      	b.n	80016f4 <xTaskIncrementTick+0x44>
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <xTaskIncrementTick+0x154>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	4b42      	ldr	r3, [pc, #264]	; (8001808 <xTaskIncrementTick+0x158>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a40      	ldr	r2, [pc, #256]	; (8001804 <xTaskIncrementTick+0x154>)
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4a40      	ldr	r2, [pc, #256]	; (8001808 <xTaskIncrementTick+0x158>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b40      	ldr	r3, [pc, #256]	; (800180c <xTaskIncrementTick+0x15c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a3e      	ldr	r2, [pc, #248]	; (800180c <xTaskIncrementTick+0x15c>)
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	f000 faec 	bl	8001cf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001718:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <xTaskIncrementTick+0x160>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	429a      	cmp	r2, r3
 8001720:	d34d      	bcc.n	80017be <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <xTaskIncrementTick+0x154>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <xTaskIncrementTick+0x80>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <xTaskIncrementTick+0x82>
 8001730:	2300      	movs	r3, #0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001736:	4b36      	ldr	r3, [pc, #216]	; (8001810 <xTaskIncrementTick+0x160>)
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	601a      	str	r2, [r3, #0]
					break;
 800173e:	e03e      	b.n	80017be <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <xTaskIncrementTick+0x154>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	d203      	bcs.n	8001760 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001758:	4a2d      	ldr	r2, [pc, #180]	; (8001810 <xTaskIncrementTick+0x160>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
						break;
 800175e:	e02e      	b.n	80017be <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	3304      	adds	r3, #4
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fdbd 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3318      	adds	r3, #24
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fdb4 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2201      	movs	r2, #1
 8001782:	409a      	lsls	r2, r3
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <xTaskIncrementTick+0x164>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4313      	orrs	r3, r2
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <xTaskIncrementTick+0x164>)
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <xTaskIncrementTick+0x168>)
 800179c:	441a      	add	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3304      	adds	r3, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4610      	mov	r0, r2
 80017a6:	f7fe fd40 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <xTaskIncrementTick+0x16c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d3b4      	bcc.n	8001722 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017bc:	e7b1      	b.n	8001722 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <xTaskIncrementTick+0x16c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	4914      	ldr	r1, [pc, #80]	; (8001818 <xTaskIncrementTick+0x168>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d907      	bls.n	80017e6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e004      	b.n	80017e6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <xTaskIncrementTick+0x170>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <xTaskIncrementTick+0x170>)
 80017e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <xTaskIncrementTick+0x174>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80017f2:	697b      	ldr	r3, [r7, #20]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20001da8 	.word	0x20001da8
 8001800:	20001d84 	.word	0x20001d84
 8001804:	20001d38 	.word	0x20001d38
 8001808:	20001d3c 	.word	0x20001d3c
 800180c:	20001d98 	.word	0x20001d98
 8001810:	20001da0 	.word	0x20001da0
 8001814:	20001d88 	.word	0x20001d88
 8001818:	20001cac 	.word	0x20001cac
 800181c:	20001ca8 	.word	0x20001ca8
 8001820:	20001d90 	.word	0x20001d90
 8001824:	20001d94 	.word	0x20001d94

08001828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <vTaskSwitchContext+0xec>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <vTaskSwitchContext+0xf0>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800183c:	e065      	b.n	800190a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <vTaskSwitchContext+0xf0>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <vTaskSwitchContext+0xf4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	429a      	cmp	r2, r3
 800185a:	d111      	bne.n	8001880 <vTaskSwitchContext+0x58>
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	3304      	adds	r3, #4
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	429a      	cmp	r2, r3
 8001866:	d10b      	bne.n	8001880 <vTaskSwitchContext+0x58>
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	3308      	adds	r3, #8
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	429a      	cmp	r2, r3
 8001872:	d105      	bne.n	8001880 <vTaskSwitchContext+0x58>
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	330c      	adds	r3, #12
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	429a      	cmp	r2, r3
 800187e:	d008      	beq.n	8001892 <vTaskSwitchContext+0x6a>
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <vTaskSwitchContext+0xf4>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <vTaskSwitchContext+0xf4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3334      	adds	r3, #52	; 0x34
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f001 ffe6 	bl	800385e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <vTaskSwitchContext+0xf8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80018a0:	7afb      	ldrb	r3, [r7, #11]
 80018a2:	f1c3 031f 	rsb	r3, r3, #31
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	491e      	ldr	r1, [pc, #120]	; (8001924 <vTaskSwitchContext+0xfc>)
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <vTaskSwitchContext+0xa8>
	__asm volatile
 80018bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c0:	f383 8811 	msr	BASEPRI, r3
 80018c4:	f3bf 8f6f 	isb	sy
 80018c8:	f3bf 8f4f 	dsb	sy
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	e7fe      	b.n	80018ce <vTaskSwitchContext+0xa6>
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <vTaskSwitchContext+0xfc>)
 80018dc:	4413      	add	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	3308      	adds	r3, #8
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d104      	bne.n	8001900 <vTaskSwitchContext+0xd8>
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <vTaskSwitchContext+0xf4>)
 8001908:	6013      	str	r3, [r2, #0]
}
 800190a:	bf00      	nop
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20001da8 	.word	0x20001da8
 8001918:	20001d94 	.word	0x20001d94
 800191c:	20001ca8 	.word	0x20001ca8
 8001920:	20001d88 	.word	0x20001d88
 8001924:	20001cac 	.word	0x20001cac

08001928 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <vTaskPlaceOnEventList+0x24>
 8001938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193c:	f383 8811 	msr	BASEPRI, r3
 8001940:	f3bf 8f6f 	isb	sy
 8001944:	f3bf 8f4f 	dsb	sy
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e7fe      	b.n	800194a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <vTaskPlaceOnEventList+0x44>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3318      	adds	r3, #24
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7fe fc8c 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800195a:	2101      	movs	r1, #1
 800195c:	6838      	ldr	r0, [r7, #0]
 800195e:	f000 fb19 	bl	8001f94 <prvAddCurrentTaskToDelayedList>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20001ca8 	.word	0x20001ca8

08001970 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <vTaskPlaceOnEventListRestricted+0x26>
 8001982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001986:	f383 8811 	msr	BASEPRI, r3
 800198a:	f3bf 8f6f 	isb	sy
 800198e:	f3bf 8f4f 	dsb	sy
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e7fe      	b.n	8001994 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <vTaskPlaceOnEventListRestricted+0x50>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	3318      	adds	r3, #24
 800199c:	4619      	mov	r1, r3
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7fe fc43 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	68b8      	ldr	r0, [r7, #8]
 80019b4:	f000 faee 	bl	8001f94 <prvAddCurrentTaskToDelayedList>
	}
 80019b8:	bf00      	nop
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20001ca8 	.word	0x20001ca8

080019c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <xTaskRemoveFromEventList+0x2a>
 80019da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019de:	f383 8811 	msr	BASEPRI, r3
 80019e2:	f3bf 8f6f 	isb	sy
 80019e6:	f3bf 8f4f 	dsb	sy
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e7fe      	b.n	80019ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	3318      	adds	r3, #24
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc76 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <xTaskRemoveFromEventList+0xac>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d11c      	bne.n	8001a3a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	3304      	adds	r3, #4
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fc6d 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	2201      	movs	r2, #1
 8001a10:	409a      	lsls	r2, r3
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <xTaskRemoveFromEventList+0xb0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <xTaskRemoveFromEventList+0xb0>)
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <xTaskRemoveFromEventList+0xb4>)
 8001a2a:	441a      	add	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f7fe fbf9 	bl	800022a <vListInsertEnd>
 8001a38:	e005      	b.n	8001a46 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	3318      	adds	r3, #24
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480e      	ldr	r0, [pc, #56]	; (8001a7c <xTaskRemoveFromEventList+0xb8>)
 8001a42:	f7fe fbf2 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <xTaskRemoveFromEventList+0xbc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d905      	bls.n	8001a60 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <xTaskRemoveFromEventList+0xc0>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e001      	b.n	8001a64 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001a64:	697b      	ldr	r3, [r7, #20]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20001da8 	.word	0x20001da8
 8001a74:	20001d88 	.word	0x20001d88
 8001a78:	20001cac 	.word	0x20001cac
 8001a7c:	20001d40 	.word	0x20001d40
 8001a80:	20001ca8 	.word	0x20001ca8
 8001a84:	20001d94 	.word	0x20001d94

08001a88 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <vTaskSetTimeOutState+0x22>
 8001a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9a:	f383 8811 	msr	BASEPRI, r3
 8001a9e:	f3bf 8f6f 	isb	sy
 8001aa2:	f3bf 8f4f 	dsb	sy
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e7fe      	b.n	8001aa8 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <vTaskSetTimeOutState+0x40>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <vTaskSetTimeOutState+0x44>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	605a      	str	r2, [r3, #4]
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20001d98 	.word	0x20001d98
 8001acc:	20001d84 	.word	0x20001d84

08001ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <xTaskCheckForTimeOut+0x24>
 8001ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae4:	f383 8811 	msr	BASEPRI, r3
 8001ae8:	f3bf 8f6f 	isb	sy
 8001aec:	f3bf 8f4f 	dsb	sy
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	e7fe      	b.n	8001af2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <xTaskCheckForTimeOut+0x3e>
 8001afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	e7fe      	b.n	8001b0c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001b0e:	f7fe fd17 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <xTaskCheckForTimeOut+0xb4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d102      	bne.n	8001b28 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e026      	b.n	8001b76 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <xTaskCheckForTimeOut+0xb8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d007      	beq.n	8001b44 <xTaskCheckForTimeOut+0x74>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d802      	bhi.n	8001b44 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e018      	b.n	8001b76 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	1ad2      	subs	r2, r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d20e      	bcs.n	8001b72 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1acb      	subs	r3, r1, r3
 8001b60:	441a      	add	r2, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ff8e 	bl	8001a88 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e001      	b.n	8001b76 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001b76:	f7fe fd11 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001b7a:	697b      	ldr	r3, [r7, #20]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20001d84 	.word	0x20001d84
 8001b88:	20001d98 	.word	0x20001d98

08001b8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <vTaskMissedYield+0x14>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	20001d94 	.word	0x20001d94

08001ba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001bac:	f000 f854 	bl	8001c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <prvIdleTask+0x2c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d907      	bls.n	8001bc8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <prvIdleTask+0x30>)
 8001bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f3bf 8f4f 	dsb	sy
 8001bc4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001bc8:	f001 fe4f 	bl	800386a <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001bcc:	e7ee      	b.n	8001bac <prvIdleTask+0x8>
 8001bce:	bf00      	nop
 8001bd0:	20001cac 	.word	0x20001cac
 8001bd4:	e000ed04 	.word	0xe000ed04

08001bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	e00c      	b.n	8001bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <prvInitialiseTaskLists+0x60>)
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe faec 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d9ef      	bls.n	8001be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <prvInitialiseTaskLists+0x64>)
 8001c06:	f7fe fae3 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001c0a:	480d      	ldr	r0, [pc, #52]	; (8001c40 <prvInitialiseTaskLists+0x68>)
 8001c0c:	f7fe fae0 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <prvInitialiseTaskLists+0x6c>)
 8001c12:	f7fe fadd 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001c16:	480c      	ldr	r0, [pc, #48]	; (8001c48 <prvInitialiseTaskLists+0x70>)
 8001c18:	f7fe fada 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001c1c:	480b      	ldr	r0, [pc, #44]	; (8001c4c <prvInitialiseTaskLists+0x74>)
 8001c1e:	f7fe fad7 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <prvInitialiseTaskLists+0x78>)
 8001c24:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <prvInitialiseTaskLists+0x64>)
 8001c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <prvInitialiseTaskLists+0x7c>)
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <prvInitialiseTaskLists+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20001cac 	.word	0x20001cac
 8001c3c:	20001d10 	.word	0x20001d10
 8001c40:	20001d24 	.word	0x20001d24
 8001c44:	20001d40 	.word	0x20001d40
 8001c48:	20001d54 	.word	0x20001d54
 8001c4c:	20001d6c 	.word	0x20001d6c
 8001c50:	20001d38 	.word	0x20001d38
 8001c54:	20001d3c 	.word	0x20001d3c

08001c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c5e:	e028      	b.n	8001cb2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001c60:	f7ff fc6c 	bl	800153c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <prvCheckTasksWaitingTermination+0x6c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8001c74:	f7ff fc70 	bl	8001558 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d119      	bne.n	8001cb2 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001c7e:	f7fe fc5f 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <prvCheckTasksWaitingTermination+0x6c>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fb28 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <prvCheckTasksWaitingTermination+0x70>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <prvCheckTasksWaitingTermination+0x70>)
 8001c9c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <prvCheckTasksWaitingTermination+0x74>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <prvCheckTasksWaitingTermination+0x74>)
 8001ca6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001ca8:	f7fe fc78 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001cac:	6838      	ldr	r0, [r7, #0]
 8001cae:	f000 f80f 	bl	8001cd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <prvCheckTasksWaitingTermination+0x74>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1d2      	bne.n	8001c60 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20001d54 	.word	0x20001d54
 8001cc8:	20001d80 	.word	0x20001d80
 8001ccc:	20001d68 	.word	0x20001d68

08001cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fd89 	bl	80007f4 <vPortFree>
			vPortFree( pxTCB );
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe fd86 	bl	80007f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <prvResetNextTaskUnblockTime+0x44>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <prvResetNextTaskUnblockTime+0x14>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <prvResetNextTaskUnblockTime+0x16>
 8001d04:	2300      	movs	r3, #0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <prvResetNextTaskUnblockTime+0x48>)
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001d12:	e008      	b.n	8001d26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <prvResetNextTaskUnblockTime+0x44>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <prvResetNextTaskUnblockTime+0x48>)
 8001d24:	6013      	str	r3, [r2, #0]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20001d38 	.word	0x20001d38
 8001d38:	20001da0 	.word	0x20001da0

08001d3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <xTaskGetSchedulerState+0x34>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	e008      	b.n	8001d62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <xTaskGetSchedulerState+0x38>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	e001      	b.n	8001d62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001d62:	687b      	ldr	r3, [r7, #4]
	}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	20001d8c 	.word	0x20001d8c
 8001d74:	20001da8 	.word	0x20001da8

08001d78 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d062      	beq.n	8001e50 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <vTaskPriorityInherit+0xe0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d25b      	bcs.n	8001e50 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db06      	blt.n	8001dae <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <vTaskPriorityInherit+0xe0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	f1c3 0205 	rsb	r2, r3, #5
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6959      	ldr	r1, [r3, #20]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <vTaskPriorityInherit+0xe4>)
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4299      	cmp	r1, r3
 8001dc4:	d101      	bne.n	8001dca <vTaskPriorityInherit+0x52>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <vTaskPriorityInherit+0x54>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d03a      	beq.n	8001e46 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fa85 	bl	80002e4 <uxListRemove>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d115      	bne.n	8001e0c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de4:	491d      	ldr	r1, [pc, #116]	; (8001e5c <vTaskPriorityInherit+0xe4>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10a      	bne.n	8001e0c <vTaskPriorityInherit+0x94>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43da      	mvns	r2, r3
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <vTaskPriorityInherit+0xe8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4013      	ands	r3, r2
 8001e08:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <vTaskPriorityInherit+0xe8>)
 8001e0a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <vTaskPriorityInherit+0xe0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <vTaskPriorityInherit+0xe8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <vTaskPriorityInherit+0xe8>)
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <vTaskPriorityInherit+0xe4>)
 8001e36:	441a      	add	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f7fe f9f3 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001e44:	e004      	b.n	8001e50 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <vTaskPriorityInherit+0xe0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20001ca8 	.word	0x20001ca8
 8001e5c:	20001cac 	.word	0x20001cac
 8001e60:	20001d88 	.word	0x20001d88

08001e64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d06c      	beq.n	8001f54 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001e7a:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <xTaskPriorityDisinherit+0xfc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d009      	beq.n	8001e98 <xTaskPriorityDisinherit+0x34>
 8001e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e88:	f383 8811 	msr	BASEPRI, r3
 8001e8c:	f3bf 8f6f 	isb	sy
 8001e90:	f3bf 8f4f 	dsb	sy
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e7fe      	b.n	8001e96 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <xTaskPriorityDisinherit+0x50>
 8001ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea4:	f383 8811 	msr	BASEPRI, r3
 8001ea8:	f3bf 8f6f 	isb	sy
 8001eac:	f3bf 8f4f 	dsb	sy
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	e7fe      	b.n	8001eb2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d044      	beq.n	8001f54 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d140      	bne.n	8001f54 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fa04 	bl	80002e4 <uxListRemove>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d115      	bne.n	8001f0e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee6:	491f      	ldr	r1, [pc, #124]	; (8001f64 <xTaskPriorityDisinherit+0x100>)
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <xTaskPriorityDisinherit+0xaa>
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	2201      	movs	r2, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <xTaskPriorityDisinherit+0x104>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <xTaskPriorityDisinherit+0x104>)
 8001f0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f1c3 0205 	rsb	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	2201      	movs	r2, #1
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <xTaskPriorityDisinherit+0x104>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <xTaskPriorityDisinherit+0x104>)
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <xTaskPriorityDisinherit+0x100>)
 8001f42:	441a      	add	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	3304      	adds	r3, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f7fe f96d 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001f50:	2301      	movs	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001f54:	697b      	ldr	r3, [r7, #20]
	}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20001ca8 	.word	0x20001ca8
 8001f64:	20001cac 	.word	0x20001cac
 8001f68:	20001d88 	.word	0x20001d88

08001f6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f7e:	3201      	adds	r2, #1
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f84:	681b      	ldr	r3, [r3, #0]
	}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	20001ca8 	.word	0x20001ca8

08001f94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f9e:	4b29      	ldr	r3, [pc, #164]	; (8002044 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fa4:	4b28      	ldr	r3, [pc, #160]	; (8002048 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe f99a 	bl	80002e4 <uxListRemove>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	4b21      	ldr	r3, [pc, #132]	; (800204c <prvAddCurrentTaskToDelayedList+0xb8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	4a20      	ldr	r2, [pc, #128]	; (800204c <prvAddCurrentTaskToDelayedList+0xb8>)
 8001fcc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d10a      	bne.n	8001fec <prvAddCurrentTaskToDelayedList+0x58>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	481a      	ldr	r0, [pc, #104]	; (8002050 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001fe6:	f7fe f920 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001fea:	e026      	b.n	800203a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ff4:	4b14      	ldr	r3, [pc, #80]	; (8002048 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d209      	bcs.n	8002018 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <prvAddCurrentTaskToDelayedList+0xb4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	3304      	adds	r3, #4
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f7fe f92e 	bl	8000272 <vListInsert>
}
 8002016:	e010      	b.n	800203a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <prvAddCurrentTaskToDelayedList+0xc4>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <prvAddCurrentTaskToDelayedList+0xb4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3304      	adds	r3, #4
 8002022:	4619      	mov	r1, r3
 8002024:	4610      	mov	r0, r2
 8002026:	f7fe f924 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <prvAddCurrentTaskToDelayedList+0xc8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	d202      	bcs.n	800203a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002034:	4a09      	ldr	r2, [pc, #36]	; (800205c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	6013      	str	r3, [r2, #0]
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20001d84 	.word	0x20001d84
 8002048:	20001ca8 	.word	0x20001ca8
 800204c:	20001d88 	.word	0x20001d88
 8002050:	20001d6c 	.word	0x20001d6c
 8002054:	20001d3c 	.word	0x20001d3c
 8002058:	20001d38 	.word	0x20001d38
 800205c:	20001da0 	.word	0x20001da0

08002060 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800206a:	f000 fadd 	bl	8002628 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <xTimerCreateTimerTask+0x54>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <xTimerCreateTimerTask+0x58>)
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	2303      	movs	r3, #3
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2300      	movs	r3, #0
 8002080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002084:	490d      	ldr	r1, [pc, #52]	; (80020bc <xTimerCreateTimerTask+0x5c>)
 8002086:	480e      	ldr	r0, [pc, #56]	; (80020c0 <xTimerCreateTimerTask+0x60>)
 8002088:	f7ff f8a6 	bl	80011d8 <xTaskCreate>
 800208c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <xTimerCreateTimerTask+0x48>
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	e7fe      	b.n	80020a6 <xTimerCreateTimerTask+0x46>
	return xReturn;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20001ddc 	.word	0x20001ddc
 80020b8:	20001de0 	.word	0x20001de0
 80020bc:	08003c84 	.word	0x08003c84
 80020c0:	08002279 	.word	0x08002279

080020c4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80020d2:	2028      	movs	r0, #40	; 0x28
 80020d4:	f7fe fb44 	bl	8000760 <pvPortMalloc>
 80020d8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d009      	beq.n	80020f4 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f805 	bl	80020fe <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80020f4:	697b      	ldr	r3, [r7, #20]
	}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <prvInitialiseNewTimer+0x28>
 8002112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002116:	f383 8811 	msr	BASEPRI, r3
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e7fe      	b.n	8002124 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800212c:	f000 fa7c 	bl	8002628 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	6a3a      	ldr	r2, [r7, #32]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	3304      	adds	r3, #4
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f85c 	bl	8000210 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <xTimerGenericCommand+0x2c>
 8002178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	623b      	str	r3, [r7, #32]
 800218a:	e7fe      	b.n	800218a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <xTimerGenericCommand+0x94>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d02a      	beq.n	80021ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	dc18      	bgt.n	80021d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80021a6:	f7ff fdc9 	bl	8001d3c <xTaskGetSchedulerState>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d109      	bne.n	80021c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80021b0:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <xTimerGenericCommand+0x94>)
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	f107 0114 	add.w	r1, r7, #20
 80021b8:	2300      	movs	r3, #0
 80021ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021bc:	f7fe fc00 	bl	80009c0 <xQueueGenericSend>
 80021c0:	6278      	str	r0, [r7, #36]	; 0x24
 80021c2:	e012      	b.n	80021ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <xTimerGenericCommand+0x94>)
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	f107 0114 	add.w	r1, r7, #20
 80021cc:	2300      	movs	r3, #0
 80021ce:	2200      	movs	r2, #0
 80021d0:	f7fe fbf6 	bl	80009c0 <xQueueGenericSend>
 80021d4:	6278      	str	r0, [r7, #36]	; 0x24
 80021d6:	e008      	b.n	80021ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <xTimerGenericCommand+0x94>)
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	f107 0114 	add.w	r1, r7, #20
 80021e0:	2300      	movs	r3, #0
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	f7fe fce6 	bl	8000bb4 <xQueueGenericSendFromISR>
 80021e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3728      	adds	r7, #40	; 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20001ddc 	.word	0x20001ddc

080021f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <prvProcessExpiredTimer+0x7c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3304      	adds	r3, #4
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f867 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d121      	bne.n	8002262 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	18d1      	adds	r1, r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f000 f8c8 	bl	80023c0 <prvInsertTimerInActiveList>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d015      	beq.n	8002262 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002236:	2300      	movs	r3, #0
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2300      	movs	r3, #0
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	2100      	movs	r1, #0
 8002240:	6978      	ldr	r0, [r7, #20]
 8002242:	f7ff ff8d 	bl	8002160 <xTimerGenericCommand>
 8002246:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <prvProcessExpiredTimer+0x6a>
 800224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e7fe      	b.n	8002260 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	4798      	blx	r3
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20001dd4 	.word	0x20001dd4

08002278 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f857 	bl	8002338 <prvGetNextExpireTime>
 800228a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4619      	mov	r1, r3
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f803 	bl	800229c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002296:	f000 f8d5 	bl	8002444 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800229a:	e7f1      	b.n	8002280 <prvTimerTask+0x8>

0800229c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80022a6:	f7ff f949 	bl	800153c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f866 	bl	8002380 <prvSampleTimeNow>
 80022b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d130      	bne.n	800231e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10a      	bne.n	80022d8 <prvProcessTimerOrBlockTask+0x3c>
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d806      	bhi.n	80022d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80022ca:	f7ff f945 	bl	8001558 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff91 	bl	80021f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80022d6:	e024      	b.n	8002322 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <prvProcessTimerOrBlockTask+0x90>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <prvProcessTimerOrBlockTask+0x94>)
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe ff37 	bl	8001170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002302:	f7ff f929 	bl	8001558 <xTaskResumeAll>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <prvProcessTimerOrBlockTask+0x98>)
 800230e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	f3bf 8f6f 	isb	sy
}
 800231c:	e001      	b.n	8002322 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800231e:	f7ff f91b 	bl	8001558 <xTaskResumeAll>
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20001dd8 	.word	0x20001dd8
 8002330:	20001ddc 	.word	0x20001ddc
 8002334:	e000ed04 	.word	0xe000ed04

08002338 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <prvGetNextExpireTime+0x44>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800235e:	4b07      	ldr	r3, [pc, #28]	; (800237c <prvGetNextExpireTime+0x44>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e001      	b.n	800236e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	20001dd4 	.word	0x20001dd4

08002380 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002388:	f7ff f982 	bl	8001690 <xTaskGetTickCount>
 800238c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <prvSampleTimeNow+0x3c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d205      	bcs.n	80023a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002398:	f000 f8e6 	bl	8002568 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e002      	b.n	80023aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <prvSampleTimeNow+0x3c>)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80023b0:	68fb      	ldr	r3, [r7, #12]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20001de4 	.word	0x20001de4

080023c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d812      	bhi.n	800240c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	1ad2      	subs	r2, r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d302      	bcc.n	80023fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80023f4:	2301      	movs	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e01b      	b.n	8002432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <prvInsertTimerInActiveList+0x7c>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3304      	adds	r3, #4
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f7fd ff34 	bl	8000272 <vListInsert>
 800240a:	e012      	b.n	8002432 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d206      	bcs.n	8002422 <prvInsertTimerInActiveList+0x62>
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d302      	bcc.n	8002422 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800241c:	2301      	movs	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e007      	b.n	8002432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <prvInsertTimerInActiveList+0x80>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3304      	adds	r3, #4
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f7fd ff20 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002432:	697b      	ldr	r3, [r7, #20]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20001dd8 	.word	0x20001dd8
 8002440:	20001dd4 	.word	0x20001dd4

08002444 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800244a:	e07a      	b.n	8002542 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db77      	blt.n	8002542 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d004      	beq.n	8002468 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	3304      	adds	r3, #4
 8002462:	4618      	mov	r0, r3
 8002464:	f7fd ff3e 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff88 	bl	8002380 <prvSampleTimeNow>
 8002470:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b09      	cmp	r3, #9
 8002476:	d863      	bhi.n	8002540 <prvProcessReceivedCommands+0xfc>
 8002478:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <prvProcessReceivedCommands+0x3c>)
 800247a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247e:	bf00      	nop
 8002480:	080024a9 	.word	0x080024a9
 8002484:	080024a9 	.word	0x080024a9
 8002488:	080024a9 	.word	0x080024a9
 800248c:	08002543 	.word	0x08002543
 8002490:	08002503 	.word	0x08002503
 8002494:	08002539 	.word	0x08002539
 8002498:	080024a9 	.word	0x080024a9
 800249c:	080024a9 	.word	0x080024a9
 80024a0:	08002543 	.word	0x08002543
 80024a4:	08002503 	.word	0x08002503
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	18d1      	adds	r1, r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a3a      	ldr	r2, [r7, #32]
 80024b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024b6:	f7ff ff83 	bl	80023c0 <prvInsertTimerInActiveList>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d040      	beq.n	8002542 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d138      	bne.n	8002542 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	441a      	add	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2300      	movs	r3, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024e2:	f7ff fe3d 	bl	8002160 <xTimerGenericCommand>
 80024e6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d129      	bne.n	8002542 <prvProcessReceivedCommands+0xfe>
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	e7fe      	b.n	8002500 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <prvProcessReceivedCommands+0xe0>
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e7fe      	b.n	8002522 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	18d1      	adds	r1, r2, r3
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	6a3a      	ldr	r2, [r7, #32]
 8002530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002532:	f7ff ff45 	bl	80023c0 <prvInsertTimerInActiveList>
					break;
 8002536:	e004      	b.n	8002542 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800253a:	f7fe f95b 	bl	80007f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800253e:	e000      	b.n	8002542 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002540:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <prvProcessReceivedCommands+0x120>)
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	f107 0108 	add.w	r1, r7, #8
 800254a:	2300      	movs	r3, #0
 800254c:	2200      	movs	r2, #0
 800254e:	f7fe fbc5 	bl	8000cdc <xQueueGenericReceive>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f af79 	bne.w	800244c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800255a:	bf00      	nop
 800255c:	3728      	adds	r7, #40	; 0x28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20001ddc 	.word	0x20001ddc

08002568 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800256e:	e044      	b.n	80025fa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <prvSwitchTimerLists+0xb8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800257a:	4b29      	ldr	r3, [pc, #164]	; (8002620 <prvSwitchTimerLists+0xb8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	3304      	adds	r3, #4
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd feab 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	6938      	ldr	r0, [r7, #16]
 8002594:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d12d      	bne.n	80025fa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	4413      	add	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d90e      	bls.n	80025ce <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <prvSwitchTimerLists+0xb8>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f7fd fe53 	bl	8000272 <vListInsert>
 80025cc:	e015      	b.n	80025fa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2300      	movs	r3, #0
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	2100      	movs	r1, #0
 80025d8:	6938      	ldr	r0, [r7, #16]
 80025da:	f7ff fdc1 	bl	8002160 <xTimerGenericCommand>
 80025de:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <prvSwitchTimerLists+0x92>
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	e7fe      	b.n	80025f8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <prvSwitchTimerLists+0xb8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1b5      	bne.n	8002570 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <prvSwitchTimerLists+0xb8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <prvSwitchTimerLists+0xbc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <prvSwitchTimerLists+0xb8>)
 8002610:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <prvSwitchTimerLists+0xbc>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6013      	str	r3, [r2, #0]
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20001dd4 	.word	0x20001dd4
 8002624:	20001dd8 	.word	0x20001dd8

08002628 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800262c:	f7fd ff88 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <prvCheckForValidListAndQueue+0x54>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d11d      	bne.n	8002674 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002638:	4811      	ldr	r0, [pc, #68]	; (8002680 <prvCheckForValidListAndQueue+0x58>)
 800263a:	f7fd fdc9 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800263e:	4811      	ldr	r0, [pc, #68]	; (8002684 <prvCheckForValidListAndQueue+0x5c>)
 8002640:	f7fd fdc6 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <prvCheckForValidListAndQueue+0x60>)
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <prvCheckForValidListAndQueue+0x58>)
 8002648:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <prvCheckForValidListAndQueue+0x64>)
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <prvCheckForValidListAndQueue+0x5c>)
 800264e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002650:	2200      	movs	r2, #0
 8002652:	210c      	movs	r1, #12
 8002654:	2005      	movs	r0, #5
 8002656:	f7fe f95b 	bl	8000910 <xQueueGenericCreate>
 800265a:	4602      	mov	r2, r0
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <prvCheckForValidListAndQueue+0x54>)
 800265e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <prvCheckForValidListAndQueue+0x54>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <prvCheckForValidListAndQueue+0x54>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4908      	ldr	r1, [pc, #32]	; (8002690 <prvCheckForValidListAndQueue+0x68>)
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fd56 	bl	8001120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002674:	f7fd ff92 	bl	800059c <vPortExitCritical>
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20001ddc 	.word	0x20001ddc
 8002680:	20001dac 	.word	0x20001dac
 8002684:	20001dc0 	.word	0x20001dc0
 8002688:	20001dd4 	.word	0x20001dd4
 800268c:	20001dd8 	.word	0x20001dd8
 8002690:	08003c8c 	.word	0x08003c8c

08002694 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <xTimerIsTimerActive+0x26>
 80026a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e7fe      	b.n	80026b8 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80026ba:	f7fd ff41 	bl	8000540 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80026ce:	f7fd ff65 	bl	800059c <vPortExitCritical>

	return xTimerIsInActiveList;
 80026d2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80026fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	791b      	ldrb	r3, [r3, #4]
 8002704:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800270a:	4313      	orrs	r3, r2
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4b18      	ldr	r3, [pc, #96]	; (8002784 <ADC_Init+0xa8>)
 8002722:	4013      	ands	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800272e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002734:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	795b      	ldrb	r3, [r3, #5]
 800273a:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800273c:	4313      	orrs	r3, r2
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002756:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7d1b      	ldrb	r3, [r3, #20]
 800275c:	3b01      	subs	r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	7afb      	ldrb	r3, [r7, #11]
 8002762:	4313      	orrs	r3, r2
 8002764:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8002766:	7afb      	ldrb	r3, [r7, #11]
 8002768:	051b      	lsls	r3, r3, #20
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	c0fff7fd 	.word	0xc0fff7fd

08002788 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80027a6:	e005      	b.n	80027b4 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f023 0201 	bic.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	609a      	str	r2, [r3, #8]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	4608      	mov	r0, r1
 80027ca:	4611      	mov	r1, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	4603      	mov	r3, r0
 80027d0:	70fb      	strb	r3, [r7, #3]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70bb      	strb	r3, [r7, #2]
 80027d6:	4613      	mov	r3, r2
 80027d8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	d923      	bls.n	8002830 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f1a3 020a 	sub.w	r2, r3, #10
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	2207      	movs	r2, #7
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	43db      	mvns	r3, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800280c:	7879      	ldrb	r1, [r7, #1]
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	f1a3 020a 	sub.w	r2, r3, #10
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	e01e      	b.n	800286e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	2207      	movs	r2, #7
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	43db      	mvns	r3, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8002850:	7879      	ldrb	r1, [r7, #1]
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800286e:	78bb      	ldrb	r3, [r7, #2]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d821      	bhi.n	80028b8 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800287a:	78bb      	ldrb	r3, [r7, #2]
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	221f      	movs	r2, #31
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	43db      	mvns	r3, r3
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4013      	ands	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8002896:	78f9      	ldrb	r1, [r7, #3]
 8002898:	78bb      	ldrb	r3, [r7, #2]
 800289a:	1e5a      	subs	r2, r3, #1
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80028b6:	e047      	b.n	8002948 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80028b8:	78bb      	ldrb	r3, [r7, #2]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d821      	bhi.n	8002902 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80028c4:	78bb      	ldrb	r3, [r7, #2]
 80028c6:	1fda      	subs	r2, r3, #7
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	221f      	movs	r2, #31
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	43db      	mvns	r3, r3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80028e0:	78f9      	ldrb	r1, [r7, #3]
 80028e2:	78bb      	ldrb	r3, [r7, #2]
 80028e4:	1fda      	subs	r2, r3, #7
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002900:	e022      	b.n	8002948 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8002908:	78bb      	ldrb	r3, [r7, #2]
 800290a:	f1a3 020d 	sub.w	r2, r3, #13
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	221f      	movs	r2, #31
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	43db      	mvns	r3, r3
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4013      	ands	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8002926:	78f9      	ldrb	r1, [r7, #3]
 8002928:	78bb      	ldrb	r3, [r7, #2]
 800292a:	f1a3 020d 	sub.w	r2, r3, #13
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	b29b      	uxth	r3, r3
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e001      	b.n	80029b4 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <DAC_SetChannel1Data+0x34>)
 80029d6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3308      	adds	r3, #8
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	461a      	mov	r2, r3
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	6013      	str	r3, [r2, #0]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40007400 	.word	0x40007400

080029fc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <DMA_Init+0xac>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002a26:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002a32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002a3e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002a4a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0307 	bic.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	4313      	orrs	r3, r2
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	60da      	str	r2, [r3, #12]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	f01c803f 	.word	0xf01c803f

08002aac <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002aca:	e005      	b.n	8002ad8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f023 0201 	bic.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	601a      	str	r2, [r3, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	e001      	b.n	8002b06 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <DMA_GetFlagStatus+0x6c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d802      	bhi.n	8002b34 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <DMA_GetFlagStatus+0x70>)
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	e001      	b.n	8002b38 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <DMA_GetFlagStatus+0x74>)
 8002b36:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e002      	b.n	8002b50 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002b56:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
 8002b6a:	e001      	b.n	8002b70 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	4002640f 	.word	0x4002640f
 8002b84:	40026000 	.word	0x40026000
 8002b88:	40026400 	.word	0x40026400

08002b8c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a10      	ldr	r2, [pc, #64]	; (8002bdc <DMA_ClearFlag+0x50>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d802      	bhi.n	8002ba4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <DMA_ClearFlag+0x54>)
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e001      	b.n	8002ba8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <DMA_ClearFlag+0x58>)
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002bb8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002bc0:	e006      	b.n	8002bd0 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002bc8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	6093      	str	r3, [r2, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	4002640f 	.word	0x4002640f
 8002be0:	40026000 	.word	0x40026000
 8002be4:	40026400 	.word	0x40026400

08002be8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e076      	b.n	8002cf2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002c04:	2201      	movs	r2, #1
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4013      	ands	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d165      	bne.n	8002cec <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2103      	movs	r1, #3
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	791b      	ldrb	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d003      	beq.n	8002c5e <GPIO_Init+0x76>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	791b      	ldrb	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d12e      	bne.n	8002cbc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2103      	movs	r1, #3
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	795b      	ldrb	r3, [r3, #5]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	4619      	mov	r1, r3
 8002c96:	2301      	movs	r3, #1
 8002c98:	408b      	lsls	r3, r1
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	7992      	ldrb	r2, [r2, #6]
 8002caa:	4611      	mov	r1, r2
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2103      	movs	r1, #3
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	79db      	ldrb	r3, [r3, #7]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b0f      	cmp	r3, #15
 8002cf6:	d985      	bls.n	8002c04 <GPIO_Init+0x1c>
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	887a      	ldrh	r2, [r7, #2]
 8002d14:	831a      	strh	r2, [r3, #24]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	887a      	ldrh	r2, [r7, #2]
 8002d32:	835a      	strh	r2, [r3, #26]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002d52:	490a      	ldr	r1, [pc, #40]	; (8002d7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002d5e:	e006      	b.n	8002d6e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002d60:	4906      	ldr	r1, [pc, #24]	; (8002d7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002d92:	490a      	ldr	r1, [pc, #40]	; (8002dbc <RCC_APB2PeriphClockCmd+0x3c>)
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <RCC_APB2PeriphClockCmd+0x3c>)
 8002d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8002d9e:	e006      	b.n	8002dae <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002da0:	4906      	ldr	r1, [pc, #24]	; (8002dbc <RCC_APB2PeriphClockCmd+0x3c>)
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <RCC_APB2PeriphClockCmd+0x3c>)
 8002da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	4013      	ands	r3, r2
 8002dac:	644b      	str	r3, [r1, #68]	; 0x44
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	819a      	strh	r2, [r3, #12]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	891b      	ldrh	r3, [r3, #8]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	4013      	ands	r3, r2
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	e001      	b.n	8002e08 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002e1c:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <Audio_MAL_IRQHandler+0xe8>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <Audio_MAL_IRQHandler+0xec>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f7ff fe74 	bl	8002b14 <DMA_GetFlagStatus>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d064      	beq.n	8002efc <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002e32:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <Audio_MAL_IRQHandler+0xf0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04c      	beq.n	8002ed4 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002e3a:	bf00      	nop
 8002e3c:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <Audio_MAL_IRQHandler+0xe8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fe4f 	bl	8002ae4 <DMA_GetCmdStatus>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f7      	bne.n	8002e3c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <Audio_MAL_IRQHandler+0xe8>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <Audio_MAL_IRQHandler+0xec>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f7ff fe98 	bl	8002b8c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <Audio_MAL_IRQHandler+0xf4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <Audio_MAL_IRQHandler+0xf8>)
 8002e64:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002e66:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <Audio_MAL_IRQHandler+0xf0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	bf28      	it	cs
 8002e72:	4613      	movcs	r3, r2
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <Audio_MAL_IRQHandler+0xf8>)
 8002e76:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <Audio_MAL_IRQHandler+0xe8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4924      	ldr	r1, [pc, #144]	; (8002f10 <Audio_MAL_IRQHandler+0xf8>)
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fdbc 	bl	80029fc <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <Audio_MAL_IRQHandler+0xe8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fe0e 	bl	8002aac <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8002e90:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <Audio_MAL_IRQHandler+0xf4>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <Audio_MAL_IRQHandler+0xf0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d203      	bcs.n	8002ea6 <Audio_MAL_IRQHandler+0x8e>
 8002e9e:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <Audio_MAL_IRQHandler+0xf0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	e000      	b.n	8002ea8 <Audio_MAL_IRQHandler+0x90>
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <Audio_MAL_IRQHandler+0xfc>)
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <Audio_MAL_IRQHandler+0xf4>)
 8002eac:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <Audio_MAL_IRQHandler+0xf0>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <Audio_MAL_IRQHandler+0xf0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002eba:	428b      	cmp	r3, r1
 8002ebc:	bf28      	it	cs
 8002ebe:	460b      	movcs	r3, r1
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <Audio_MAL_IRQHandler+0xf0>)
 8002ec4:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <Audio_MAL_IRQHandler+0xe8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fded 	bl	8002aac <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002ed2:	e013      	b.n	8002efc <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <Audio_MAL_IRQHandler+0xe8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fde6 	bl	8002aac <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <Audio_MAL_IRQHandler+0xe8>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <Audio_MAL_IRQHandler+0xec>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f7ff fe4e 	bl	8002b8c <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <Audio_MAL_IRQHandler+0xf4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fb2c 	bl	8003554 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	2000000c 	.word	0x2000000c
 8002f04:	20000010 	.word	0x20000010
 8002f08:	20000004 	.word	0x20000004
 8002f0c:	20001e34 	.word	0x20001e34
 8002f10:	20001e74 	.word	0x20001e74
 8002f14:	0001fffe 	.word	0x0001fffe

08002f18 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002f1c:	f7ff ff7c 	bl	8002e18 <Audio_MAL_IRQHandler>
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002f28:	f7ff ff76 	bl	8002e18 <Audio_MAL_IRQHandler>
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002f34:	2102      	movs	r1, #2
 8002f36:	480d      	ldr	r0, [pc, #52]	; (8002f6c <SPI3_IRQHandler+0x3c>)
 8002f38:	f7ff ff51 	bl	8002dde <SPI_I2S_GetFlagStatus>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d011      	beq.n	8002f66 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <SPI3_IRQHandler+0x40>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d106      	bne.n	8002f58 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002f4a:	f000 fb0e 	bl	800356a <EVAL_AUDIO_GetSampleCallBack>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4619      	mov	r1, r3
 8002f52:	2004      	movs	r0, #4
 8002f54:	f7ff fd36 	bl	80029c4 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8002f58:	f000 fb07 	bl	800356a <EVAL_AUDIO_GetSampleCallBack>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <SPI3_IRQHandler+0x3c>)
 8002f62:	f7ff ff2d 	bl	8002dc0 <SPI_I2S_SendData>
  }
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40003c00 	.word	0x40003c00
 8002f70:	20000008 	.word	0x20000008

08002f74 <ShiftRegisterPush>:

/*
 * 	Pushes the parameter (0 or 1) onto the shift register
 */
void ShiftRegisterPush( uint16_t newCar )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
	if (newCar == 1) {                                          // Next space is a car, set the data bit high
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d104      	bne.n	8002f8e <ShiftRegisterPush+0x1a>
		GPIO_SetBits(SHIFT_PORT, SHIFT_DATA);
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	480a      	ldr	r0, [pc, #40]	; (8002fb0 <ShiftRegisterPush+0x3c>)
 8002f88:	f7ff febc 	bl	8002d04 <GPIO_SetBits>
 8002f8c:	e003      	b.n	8002f96 <ShiftRegisterPush+0x22>
	} else {                                                    // Next space is empty, set the data bit low
		GPIO_ResetBits(SHIFT_PORT, SHIFT_DATA);
 8002f8e:	2140      	movs	r1, #64	; 0x40
 8002f90:	4807      	ldr	r0, [pc, #28]	; (8002fb0 <ShiftRegisterPush+0x3c>)
 8002f92:	f7ff fec6 	bl	8002d22 <GPIO_ResetBits>
	}

	GPIO_SetBits(SHIFT_PORT, SHIFT_CLOCK);        		// Pulse the clock to push the data bit on the shift register
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <ShiftRegisterPush+0x3c>)
 8002f9a:	f7ff feb3 	bl	8002d04 <GPIO_SetBits>
	GPIO_ResetBits(SHIFT_PORT, SHIFT_CLOCK);
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	4803      	ldr	r0, [pc, #12]	; (8002fb0 <ShiftRegisterPush+0x3c>)
 8002fa2:	f7ff febe 	bl	8002d22 <GPIO_ResetBits>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40020800 	.word	0x40020800

08002fb4 <TrafficDisplayTask>:

/*
 * Shifts the traffic forward and deals with the logic that controls traffic behavior relative to the lights
 */
void TrafficDisplayTask(void *pvParameters) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b09a      	sub	sp, #104	; 0x68
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	uint16_t car = 0;                            				// Default is no car
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint16_t lightStatus = 1;                         			// Default light is green
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	uint16_t previousTraffic[19] = { 0 }; 						// The state of traffic before any changes
 8002fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fcc:	2226      	movs	r2, #38	; 0x26
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fd98 	bl	8003b06 <memset>
	uint16_t newTraffic[19] = { 0 }; 							// The updated traffic to be pushed to the shift register
 8002fd6:	f107 0308 	add.w	r3, r7, #8
 8002fda:	2226      	movs	r2, #38	; 0x26
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fd91 	bl	8003b06 <memset>

	while (1) {
		xQueuePeek(xCarQueue, &car, 0);							// Get the next car
 8002fe4:	4b73      	ldr	r3, [pc, #460]	; (80031b4 <TrafficDisplayTask+0x200>)
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	f107 015a 	add.w	r1, r7, #90	; 0x5a
 8002fec:	2301      	movs	r3, #1
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f7fd fe74 	bl	8000cdc <xQueueGenericReceive>
		xQueuePeek(xLightQueue, &lightStatus, 0);				// Get the light status
 8002ff4:	4b70      	ldr	r3, [pc, #448]	; (80031b8 <TrafficDisplayTask+0x204>)
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	2200      	movs	r2, #0
 8003000:	f7fd fe6c 	bl	8000cdc <xQueueGenericReceive>

		if (lightStatus == 1) {
 8003004:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003008:	2b01      	cmp	r3, #1
 800300a:	d127      	bne.n	800305c <TrafficDisplayTask+0xa8>
			ShiftRegisterPush(car); 							// Push the next car onto the shift register
 800300c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ffaf 	bl	8002f74 <ShiftRegisterPush>
			newTraffic[0] = car; 								// Update the active car list with the new car value
 8003016:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800301a:	813b      	strh	r3, [r7, #8]

			// Update the current traffic list with our new values
			for (uint16_t i = 1; i < 19; i++) {
 800301c:	2301      	movs	r3, #1
 800301e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003022:	e016      	b.n	8003052 <TrafficDisplayTask+0x9e>
				newTraffic[i] = previousTraffic[i - 1];
 8003024:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003028:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800302c:	3b01      	subs	r3, #1
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003034:	440b      	add	r3, r1
 8003036:	f833 1c38 	ldrh.w	r1, [r3, #-56]
 800303a:	0053      	lsls	r3, r2, #1
 800303c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003040:	4413      	add	r3, r2
 8003042:	460a      	mov	r2, r1
 8003044:	f823 2c60 	strh.w	r2, [r3, #-96]
			for (uint16_t i = 1; i < 19; i++) {
 8003048:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800304c:	3301      	adds	r3, #1
 800304e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003052:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003056:	2b12      	cmp	r3, #18
 8003058:	d9e4      	bls.n	8003024 <TrafficDisplayTask+0x70>
 800305a:	e087      	b.n	800316c <TrafficDisplayTask+0x1b8>
			}
		} else if (lightStatus == 0) {
 800305c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 8083 	bne.w	800316c <TrafficDisplayTask+0x1b8>

			uint16_t spaceExists = 0; 							// Flag for free space in front of stop line
 8003066:	2300      	movs	r3, #0
 8003068:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

			// Check if the traffic before the stop line can be moved forward
			for (uint16_t i = 7; i != 0; i--) {
 800306c:	2307      	movs	r3, #7
 800306e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003072:	e03c      	b.n	80030ee <TrafficDisplayTask+0x13a>
				if (previousTraffic[i] == 0) {
 8003074:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800307e:	4413      	add	r3, r2
 8003080:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <TrafficDisplayTask+0xe0>
					spaceExists = 1;        					// Found a space, set the flag
 8003088:	2301      	movs	r3, #1
 800308a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
					newTraffic[0] = car;
 800308e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003092:	813b      	strh	r3, [r7, #8]
				}

				if (spaceExists == 1) {
 8003094:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003098:	2b01      	cmp	r3, #1
 800309a:	d112      	bne.n	80030c2 <TrafficDisplayTask+0x10e>
					newTraffic[i] = previousTraffic[i - 1];		// Move the current car forward since there is space in front of it
 800309c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80030a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80030a4:	3b01      	subs	r3, #1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80030ac:	440b      	add	r3, r1
 80030ae:	f833 1c38 	ldrh.w	r1, [r3, #-56]
 80030b2:	0053      	lsls	r3, r2, #1
 80030b4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80030b8:	4413      	add	r3, r2
 80030ba:	460a      	mov	r2, r1
 80030bc:	f823 2c60 	strh.w	r2, [r3, #-96]
 80030c0:	e010      	b.n	80030e4 <TrafficDisplayTask+0x130>
				} else {
					newTraffic[i] = previousTraffic[i];			// Don't shift forward, no empty space yet
 80030c2:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80030c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80030d0:	440b      	add	r3, r1
 80030d2:	f833 1c38 	ldrh.w	r1, [r3, #-56]
 80030d6:	0053      	lsls	r3, r2, #1
 80030d8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80030dc:	4413      	add	r3, r2
 80030de:	460a      	mov	r2, r1
 80030e0:	f823 2c60 	strh.w	r2, [r3, #-96]
			for (uint16_t i = 7; i != 0; i--) {
 80030e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80030e8:	3b01      	subs	r3, #1
 80030ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80030ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1be      	bne.n	8003074 <TrafficDisplayTask+0xc0>
				}
			}

			newTraffic[8] = 0; 									// Update the LED directly after the stop line to be empty
 80030f6:	2300      	movs	r3, #0
 80030f8:	833b      	strh	r3, [r7, #24]

			// Push all of the cars after the stop line forward one space
			for (uint16_t i = 18; i > 8; i--) {
 80030fa:	2312      	movs	r3, #18
 80030fc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8003100:	e016      	b.n	8003130 <TrafficDisplayTask+0x17c>
				newTraffic[i] = previousTraffic[i - 1];
 8003102:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8003106:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800310a:	3b01      	subs	r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003112:	440b      	add	r3, r1
 8003114:	f833 1c38 	ldrh.w	r1, [r3, #-56]
 8003118:	0053      	lsls	r3, r2, #1
 800311a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800311e:	4413      	add	r3, r2
 8003120:	460a      	mov	r2, r1
 8003122:	f823 2c60 	strh.w	r2, [r3, #-96]
			for (uint16_t i = 18; i > 8; i--) {
 8003126:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800312a:	3b01      	subs	r3, #1
 800312c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8003130:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003134:	2b08      	cmp	r3, #8
 8003136:	d8e4      	bhi.n	8003102 <TrafficDisplayTask+0x14e>
			}

			// Push the complete updated traffic array onto the shift register
			for (int16_t i = 18; i >= 0; i--) {
 8003138:	2312      	movs	r3, #18
 800313a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800313e:	e011      	b.n	8003164 <TrafficDisplayTask+0x1b0>
				ShiftRegisterPush(previousTraffic[i]);
 8003140:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800314a:	4413      	add	r3, r2
 800314c:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff0f 	bl	8002f74 <ShiftRegisterPush>
			for (int16_t i = 18; i >= 0; i--) {
 8003156:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003164:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8003168:	2b00      	cmp	r3, #0
 800316a:	dae9      	bge.n	8003140 <TrafficDisplayTask+0x18c>
			}
		}

		// Set the current traffic array to the new updated array
		for (uint16_t i = 0; i < 19; i++) {
 800316c:	2300      	movs	r3, #0
 800316e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003172:	e015      	b.n	80031a0 <TrafficDisplayTask+0x1ec>
			previousTraffic[i] = newTraffic[i];
 8003174:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003178:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003182:	440b      	add	r3, r1
 8003184:	f833 1c60 	ldrh.w	r1, [r3, #-96]
 8003188:	0053      	lsls	r3, r2, #1
 800318a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800318e:	4413      	add	r3, r2
 8003190:	460a      	mov	r2, r1
 8003192:	f823 2c38 	strh.w	r2, [r3, #-56]
		for (uint16_t i = 0; i < 19; i++) {
 8003196:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800319a:	3301      	adds	r3, #1
 800319c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80031a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80031a4:	2b12      	cmp	r3, #18
 80031a6:	d9e5      	bls.n	8003174 <TrafficDisplayTask+0x1c0>
		}

		vTaskDelay(500);
 80031a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031ac:	f7fe f946 	bl	800143c <vTaskDelay>
		xQueuePeek(xCarQueue, &car, 0);							// Get the next car
 80031b0:	e718      	b.n	8002fe4 <TrafficDisplayTask+0x30>
 80031b2:	bf00      	nop
 80031b4:	20001eb0 	.word	0x20001eb0
 80031b8:	20001eb4 	.word	0x20001eb4

080031bc <TrafficFlowAdjustmentTask>:

/*
* Converts the analog potentiometer value to a digital value and updates the flow queue
*/
void TrafficFlowAdjustmentTask ( void *pvParameters )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    uint16_t analogFlow = 0;            					// Default analog reading is 0
 80031c4:	2300      	movs	r3, #0
 80031c6:	81bb      	strh	r3, [r7, #12]
    uint16_t digitalFlow = 0;								// Default digital conversion is 0
 80031c8:	2300      	movs	r3, #0
 80031ca:	813b      	strh	r3, [r7, #8]
    uint16_t previousAnalogFlow = 0;								// Default previous digital conversion is 0
 80031cc:	2300      	movs	r3, #0
 80031ce:	81fb      	strh	r3, [r7, #14]
    uint16_t flowDifference;

	while(1)
	{
		ADC_SoftwareStartConv(ADC1);		            	// Initiate ADC conversion
 80031d0:	4818      	ldr	r0, [pc, #96]	; (8003234 <TrafficFlowAdjustmentTask+0x78>)
 80031d2:	f7ff fbbf 	bl	8002954 <ADC_SoftwareStartConv>
		while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));		// Wait for conversion to finish
 80031d6:	bf00      	nop
 80031d8:	2102      	movs	r1, #2
 80031da:	4816      	ldr	r0, [pc, #88]	; (8003234 <TrafficFlowAdjustmentTask+0x78>)
 80031dc:	f7ff fbd7 	bl	800298e <ADC_GetFlagStatus>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f8      	beq.n	80031d8 <TrafficFlowAdjustmentTask+0x1c>
		analogFlow = ADC_GetConversionValue(ADC1);       	// Get the converted value
 80031e6:	4813      	ldr	r0, [pc, #76]	; (8003234 <TrafficFlowAdjustmentTask+0x78>)
 80031e8:	f7ff fbc4 	bl	8002974 <ADC_GetConversionValue>
 80031ec:	4603      	mov	r3, r0
 80031ee:	81bb      	strh	r3, [r7, #12]

		flowDifference = abs(analogFlow - previousAnalogFlow);   // See if there is a flow change
 80031f0:	89ba      	ldrh	r2, [r7, #12]
 80031f2:	89fb      	ldrh	r3, [r7, #14]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bfb8      	it	lt
 80031fa:	425b      	neglt	r3, r3
 80031fc:	817b      	strh	r3, [r7, #10]

		digitalFlow = analogFlow / 512;                		// Divide the analog value by 512 to produce an int from 0-7
 80031fe:	89bb      	ldrh	r3, [r7, #12]
 8003200:	0a5b      	lsrs	r3, r3, #9
 8003202:	b29b      	uxth	r3, r3
 8003204:	813b      	strh	r3, [r7, #8]
		if (digitalFlow == 8) digitalFlow = 7;				// Will only be 8 if at max capacity
 8003206:	893b      	ldrh	r3, [r7, #8]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d101      	bne.n	8003210 <TrafficFlowAdjustmentTask+0x54>
 800320c:	2307      	movs	r3, #7
 800320e:	813b      	strh	r3, [r7, #8]

	    if (flowDifference > 100) {
 8003210:	897b      	ldrh	r3, [r7, #10]
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d909      	bls.n	800322a <TrafficFlowAdjustmentTask+0x6e>
	    	previousAnalogFlow = analogFlow;				// Update the local flow variable and the shared queue
 8003216:	89bb      	ldrh	r3, [r7, #12]
 8003218:	81fb      	strh	r3, [r7, #14]
	    	xQueueOverwrite(xFlowQueue, &digitalFlow);
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <TrafficFlowAdjustmentTask+0x7c>)
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	f107 0108 	add.w	r1, r7, #8
 8003222:	2302      	movs	r3, #2
 8003224:	2200      	movs	r2, #0
 8003226:	f7fd fbcb 	bl	80009c0 <xQueueGenericSend>
	    }

        vTaskDelay(250);
 800322a:	20fa      	movs	r0, #250	; 0xfa
 800322c:	f7fe f906 	bl	800143c <vTaskDelay>
		ADC_SoftwareStartConv(ADC1);		            	// Initiate ADC conversion
 8003230:	e7ce      	b.n	80031d0 <TrafficFlowAdjustmentTask+0x14>
 8003232:	bf00      	nop
 8003234:	40012000 	.word	0x40012000
 8003238:	20001eb8 	.word	0x20001eb8

0800323c <TrafficCreatorTask>:

/*
 * Creates the next car or empty space relative to the potentiometer input
 */
void TrafficCreatorTask ( void *pvParameters )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	uint16_t car = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	81bb      	strh	r3, [r7, #12]
	uint16_t flow = 4;
 8003248:	2304      	movs	r3, #4
 800324a:	817b      	strh	r3, [r7, #10]
	uint16_t sinceLastCar = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	81fb      	strh	r3, [r7, #14]

	while(1)
	{
		xQueuePeek(xFlowQueue, &flow, 0);
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <TrafficCreatorTask+0x94>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	f107 010a 	add.w	r1, r7, #10
 8003258:	2301      	movs	r3, #1
 800325a:	2200      	movs	r2, #0
 800325c:	f7fd fd3e 	bl	8000cdc <xQueueGenericReceive>

		if (sinceLastCar > 5) { 							// If we haven't had a car in 5 spaces, guarantee one (per the requirements)
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	2b05      	cmp	r3, #5
 8003264:	d904      	bls.n	8003270 <TrafficCreatorTask+0x34>
			car = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	81bb      	strh	r3, [r7, #12]
			sinceLastCar = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	81fb      	strh	r3, [r7, #14]
 800326e:	e022      	b.n	80032b6 <TrafficCreatorTask+0x7a>
		} else {											// Otherwise, randomly generate a car with increasing probability as the ADC value increases
			car = (rand() % 100 ) < 100 / (8 - flow);		// A flow of 7 (maximum possible) guarantees traffic creation for bumper to bumper traffic
 8003270:	f000 fc52 	bl	8003b18 <rand>
 8003274:	4602      	mov	r2, r0
 8003276:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <TrafficCreatorTask+0x98>)
 8003278:	fb83 1302 	smull	r1, r3, r3, r2
 800327c:	1159      	asrs	r1, r3, #5
 800327e:	17d3      	asrs	r3, r2, #31
 8003280:	1acb      	subs	r3, r1, r3
 8003282:	2164      	movs	r1, #100	; 0x64
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	897a      	ldrh	r2, [r7, #10]
 800328c:	f1c2 0208 	rsb	r2, r2, #8
 8003290:	2164      	movs	r1, #100	; 0x64
 8003292:	fb91 f2f2 	sdiv	r2, r1, r2
 8003296:	4293      	cmp	r3, r2
 8003298:	bfb4      	ite	lt
 800329a:	2301      	movlt	r3, #1
 800329c:	2300      	movge	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	81bb      	strh	r3, [r7, #12]
			if (car == 0) sinceLastCar++;
 80032a4:	89bb      	ldrh	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <TrafficCreatorTask+0x76>
 80032aa:	89fb      	ldrh	r3, [r7, #14]
 80032ac:	3301      	adds	r3, #1
 80032ae:	81fb      	strh	r3, [r7, #14]
 80032b0:	e001      	b.n	80032b6 <TrafficCreatorTask+0x7a>
			else sinceLastCar = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	81fb      	strh	r3, [r7, #14]
		}

		xQueueOverwrite(xCarQueue, &car);					// Write the 'next car' to the car queue to be pushed onto the shift register
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <TrafficCreatorTask+0x9c>)
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	f107 010c 	add.w	r1, r7, #12
 80032be:	2302      	movs	r3, #2
 80032c0:	2200      	movs	r2, #0
 80032c2:	f7fd fb7d 	bl	80009c0 <xQueueGenericSend>

		vTaskDelay(500);
 80032c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032ca:	f7fe f8b7 	bl	800143c <vTaskDelay>
		xQueuePeek(xFlowQueue, &flow, 0);
 80032ce:	e7bf      	b.n	8003250 <TrafficCreatorTask+0x14>
 80032d0:	20001eb8 	.word	0x20001eb8
 80032d4:	51eb851f 	.word	0x51eb851f
 80032d8:	20001eb0 	.word	0x20001eb0

080032dc <vGreenLightTimerCallback>:

/*
 * Called when green software timer expires and switches the light to yellow
 */
void vGreenLightTimerCallback( xTimerHandle xTimer )
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b087      	sub	sp, #28
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	6078      	str	r0, [r7, #4]
	GPIO_ResetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_GREEN);        // Green light off
 80032e4:	2104      	movs	r1, #4
 80032e6:	4810      	ldr	r0, [pc, #64]	; (8003328 <vGreenLightTimerCallback+0x4c>)
 80032e8:	f7ff fd1b 	bl	8002d22 <GPIO_ResetBits>
	GPIO_SetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_YELLOW);         // Yellow light on
 80032ec:	2102      	movs	r1, #2
 80032ee:	480e      	ldr	r0, [pc, #56]	; (8003328 <vGreenLightTimerCallback+0x4c>)
 80032f0:	f7ff fd08 	bl	8002d04 <GPIO_SetBits>

	uint16_t color = 0;													// Update the current light status queue with the new light color
 80032f4:	2300      	movs	r3, #0
 80032f6:	81fb      	strh	r3, [r7, #14]
	xQueueOverwrite(xLightQueue, &color);
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <vGreenLightTimerCallback+0x50>)
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	f107 010e 	add.w	r1, r7, #14
 8003300:	2302      	movs	r3, #2
 8003302:	2200      	movs	r2, #0
 8003304:	f7fd fb5c 	bl	80009c0 <xQueueGenericSend>

	xTimerStart( xYellowLightSoftwareTimer, 0 );                    	// Start the yellow light timer, yellow light callback will be hit at completion
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <vGreenLightTimerCallback+0x54>)
 800330a:	681c      	ldr	r4, [r3, #0]
 800330c:	f7fe f9c0 	bl	8001690 <xTaskGetTickCount>
 8003310:	4602      	mov	r2, r0
 8003312:	2300      	movs	r3, #0
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	2300      	movs	r3, #0
 8003318:	2101      	movs	r1, #1
 800331a:	4620      	mov	r0, r4
 800331c:	f7fe ff20 	bl	8002160 <xTimerGenericCommand>
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bd90      	pop	{r4, r7, pc}
 8003328:	40020800 	.word	0x40020800
 800332c:	20001eb4 	.word	0x20001eb4
 8003330:	20001ec0 	.word	0x20001ec0

08003334 <vYellowLightTimerCallback>:

/*
 * Called when yellow software timer expires and switches the light to red
 */
void vYellowLightTimerCallback( xTimerHandle xTimer )
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b085      	sub	sp, #20
 8003338:	af02      	add	r7, sp, #8
 800333a:	6078      	str	r0, [r7, #4]
	GPIO_ResetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_YELLOW);       // Yellow light off
 800333c:	2102      	movs	r1, #2
 800333e:	480b      	ldr	r0, [pc, #44]	; (800336c <vYellowLightTimerCallback+0x38>)
 8003340:	f7ff fcef 	bl	8002d22 <GPIO_ResetBits>
	GPIO_SetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_RED);            // Red light on
 8003344:	2101      	movs	r1, #1
 8003346:	4809      	ldr	r0, [pc, #36]	; (800336c <vYellowLightTimerCallback+0x38>)
 8003348:	f7ff fcdc 	bl	8002d04 <GPIO_SetBits>

	xTimerStart( xRedLightSoftwareTimer, 0 );                           // Start the red light timer, red light callback will be hit at completion
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <vYellowLightTimerCallback+0x3c>)
 800334e:	681c      	ldr	r4, [r3, #0]
 8003350:	f7fe f99e 	bl	8001690 <xTaskGetTickCount>
 8003354:	4602      	mov	r2, r0
 8003356:	2300      	movs	r3, #0
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2300      	movs	r3, #0
 800335c:	2101      	movs	r1, #1
 800335e:	4620      	mov	r0, r4
 8003360:	f7fe fefe 	bl	8002160 <xTimerGenericCommand>
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	40020800 	.word	0x40020800
 8003370:	20001ebc 	.word	0x20001ebc

08003374 <vRedLightTimerCallback>:

/*
 * Called when red software timer expires and switches the light to green
 */
void vRedLightTimerCallback( xTimerHandle xTimer )
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b087      	sub	sp, #28
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
	GPIO_ResetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_RED);          // Red light off
 800337c:	2101      	movs	r1, #1
 800337e:	4810      	ldr	r0, [pc, #64]	; (80033c0 <vRedLightTimerCallback+0x4c>)
 8003380:	f7ff fccf 	bl	8002d22 <GPIO_ResetBits>
	GPIO_SetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_GREEN);          // Green light on
 8003384:	2104      	movs	r1, #4
 8003386:	480e      	ldr	r0, [pc, #56]	; (80033c0 <vRedLightTimerCallback+0x4c>)
 8003388:	f7ff fcbc 	bl	8002d04 <GPIO_SetBits>

	uint16_t color = 1;
 800338c:	2301      	movs	r3, #1
 800338e:	81fb      	strh	r3, [r7, #14]
	xQueueOverwrite(xLightQueue, &color);
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <vRedLightTimerCallback+0x50>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	f107 010e 	add.w	r1, r7, #14
 8003398:	2302      	movs	r3, #2
 800339a:	2200      	movs	r2, #0
 800339c:	f7fd fb10 	bl	80009c0 <xQueueGenericSend>

	xTimerStart( xGreenLightSoftwareTimer, 0 );                     	// Start the green light timer, green light callback will be hit at completion
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <vRedLightTimerCallback+0x54>)
 80033a2:	681c      	ldr	r4, [r3, #0]
 80033a4:	f7fe f974 	bl	8001690 <xTaskGetTickCount>
 80033a8:	4602      	mov	r2, r0
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	2101      	movs	r1, #1
 80033b2:	4620      	mov	r0, r4
 80033b4:	f7fe fed4 	bl	8002160 <xTimerGenericCommand>
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd90      	pop	{r4, r7, pc}
 80033c0:	40020800 	.word	0x40020800
 80033c4:	20001eb4 	.word	0x20001eb4
 80033c8:	20001ec4 	.word	0x20001ec4

080033cc <TrafficLightTask>:

/*
 * Adjusts the traffic light durations if the traffic flow is changed
*/
void TrafficLightTask ( void *pvParameters )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	6078      	str	r0, [r7, #4]
	uint16_t newSpeed = 3;          								 	// Default speed (before ADC read) is 3 (scale of 0-7)
 80033d4:	2303      	movs	r3, #3
 80033d6:	813b      	strh	r3, [r7, #8]
	uint16_t lastSpeed = 0;      						 				// Initially 0 to trigger the different speed conditional below
 80033d8:	2300      	movs	r3, #0
 80033da:	81fb      	strh	r3, [r7, #14]

	while(1)
	{
		xQueuePeek(xFlowQueue, &newSpeed, 0); 							// Get the current speed from the queue
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <TrafficLightTask+0x178>)
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	f107 0108 	add.w	r1, r7, #8
 80033e4:	2301      	movs	r3, #1
 80033e6:	2200      	movs	r2, #0
 80033e8:	f7fd fc78 	bl	8000cdc <xQueueGenericReceive>

		if (lastSpeed != newSpeed) {
 80033ec:	893b      	ldrh	r3, [r7, #8]
 80033ee:	89fa      	ldrh	r2, [r7, #14]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	f000 809f 	beq.w	8003534 <TrafficLightTask+0x168>
			uint16_t redSpeed = 4000 + 500 * (8 - newSpeed);			// Calculate the new red period
 80033f6:	893b      	ldrh	r3, [r7, #8]
 80033f8:	f1c3 0308 	rsb	r3, r3, #8
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	0152      	lsls	r2, r2, #5
 8003402:	1ad2      	subs	r2, r2, r3
 8003404:	0092      	lsls	r2, r2, #2
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	b29b      	uxth	r3, r3
 800340c:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8003410:	81bb      	strh	r3, [r7, #12]
			uint16_t greenSpeed = 4000 + 500 * (newSpeed);				// Calculate the new green period
 8003412:	893b      	ldrh	r3, [r7, #8]
 8003414:	461a      	mov	r2, r3
 8003416:	0152      	lsls	r2, r2, #5
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	b29b      	uxth	r3, r3
 8003422:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8003426:	817b      	strh	r3, [r7, #10]

			if(xTimerIsTimerActive( xGreenLightSoftwareTimer )) {
 8003428:	4b47      	ldr	r3, [pc, #284]	; (8003548 <TrafficLightTask+0x17c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff f931 	bl	8002694 <xTimerIsTimerActive>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d024      	beq.n	8003482 <TrafficLightTask+0xb6>
				xTimerStop(xGreenLightSoftwareTimer, 0);                                                    // stop the green timer to change the period
 8003438:	4b43      	ldr	r3, [pc, #268]	; (8003548 <TrafficLightTask+0x17c>)
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	2300      	movs	r3, #0
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2300      	movs	r3, #0
 8003442:	2200      	movs	r2, #0
 8003444:	2103      	movs	r1, #3
 8003446:	f7fe fe8b 	bl	8002160 <xTimerGenericCommand>
				xTimerChangePeriod(xGreenLightSoftwareTimer, greenSpeed / portTICK_PERIOD_MS, 0 );  		// starts the green timer
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <TrafficLightTask+0x17c>)
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	897a      	ldrh	r2, [r7, #10]
 8003450:	2300      	movs	r3, #0
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	2104      	movs	r1, #4
 8003458:	f7fe fe82 	bl	8002160 <xTimerGenericCommand>
				xTimerChangePeriod(xRedLightSoftwareTimer, redSpeed / portTICK_PERIOD_MS, 0 );     			// starts the red timer    (don't want it started)
 800345c:	4b3b      	ldr	r3, [pc, #236]	; (800354c <TrafficLightTask+0x180>)
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	89ba      	ldrh	r2, [r7, #12]
 8003462:	2300      	movs	r3, #0
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	2300      	movs	r3, #0
 8003468:	2104      	movs	r1, #4
 800346a:	f7fe fe79 	bl	8002160 <xTimerGenericCommand>
				xTimerStop(xRedLightSoftwareTimer, 0);                                                      // stop the red timer
 800346e:	4b37      	ldr	r3, [pc, #220]	; (800354c <TrafficLightTask+0x180>)
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	2300      	movs	r3, #0
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	2300      	movs	r3, #0
 8003478:	2200      	movs	r2, #0
 800347a:	2103      	movs	r1, #3
 800347c:	f7fe fe70 	bl	8002160 <xTimerGenericCommand>
 8003480:	e058      	b.n	8003534 <TrafficLightTask+0x168>
			} else if(xTimerIsTimerActive( xYellowLightSoftwareTimer )) {
 8003482:	4b33      	ldr	r3, [pc, #204]	; (8003550 <TrafficLightTask+0x184>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff f904 	bl	8002694 <xTimerIsTimerActive>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d024      	beq.n	80034dc <TrafficLightTask+0x110>
				xTimerChangePeriod(xGreenLightSoftwareTimer, greenSpeed / portTICK_PERIOD_MS, 0 );  		// starts the green timer (don't want it started)
 8003492:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <TrafficLightTask+0x17c>)
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	897a      	ldrh	r2, [r7, #10]
 8003498:	2300      	movs	r3, #0
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2300      	movs	r3, #0
 800349e:	2104      	movs	r1, #4
 80034a0:	f7fe fe5e 	bl	8002160 <xTimerGenericCommand>
				xTimerStop(xGreenLightSoftwareTimer, 0);                                                    // stop the green timer
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <TrafficLightTask+0x17c>)
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	2300      	movs	r3, #0
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2300      	movs	r3, #0
 80034ae:	2200      	movs	r2, #0
 80034b0:	2103      	movs	r1, #3
 80034b2:	f7fe fe55 	bl	8002160 <xTimerGenericCommand>
				xTimerChangePeriod(xRedLightSoftwareTimer, redSpeed / portTICK_PERIOD_MS, 0 );     			// starts the red timer    (don't want it started)
 80034b6:	4b25      	ldr	r3, [pc, #148]	; (800354c <TrafficLightTask+0x180>)
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	89ba      	ldrh	r2, [r7, #12]
 80034bc:	2300      	movs	r3, #0
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	2104      	movs	r1, #4
 80034c4:	f7fe fe4c 	bl	8002160 <xTimerGenericCommand>
				xTimerStop(xRedLightSoftwareTimer, 0);                                                      // stop the red timer
 80034c8:	4b20      	ldr	r3, [pc, #128]	; (800354c <TrafficLightTask+0x180>)
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	2300      	movs	r3, #0
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2300      	movs	r3, #0
 80034d2:	2200      	movs	r2, #0
 80034d4:	2103      	movs	r1, #3
 80034d6:	f7fe fe43 	bl	8002160 <xTimerGenericCommand>
 80034da:	e02b      	b.n	8003534 <TrafficLightTask+0x168>
			} else if(xTimerIsTimerActive( xRedLightSoftwareTimer )) {
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <TrafficLightTask+0x180>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f8d7 	bl	8002694 <xTimerIsTimerActive>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d023      	beq.n	8003534 <TrafficLightTask+0x168>
				xTimerStop(xRedLightSoftwareTimer, 0);														// stop the red timer to change the period
 80034ec:	4b17      	ldr	r3, [pc, #92]	; (800354c <TrafficLightTask+0x180>)
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	2300      	movs	r3, #0
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2300      	movs	r3, #0
 80034f6:	2200      	movs	r2, #0
 80034f8:	2103      	movs	r1, #3
 80034fa:	f7fe fe31 	bl	8002160 <xTimerGenericCommand>
				xTimerChangePeriod(xGreenLightSoftwareTimer, greenSpeed / portTICK_PERIOD_MS, 0 );  		// starts the green timer (don't want it started)
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <TrafficLightTask+0x17c>)
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	897a      	ldrh	r2, [r7, #10]
 8003504:	2300      	movs	r3, #0
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2300      	movs	r3, #0
 800350a:	2104      	movs	r1, #4
 800350c:	f7fe fe28 	bl	8002160 <xTimerGenericCommand>
				xTimerStop(xGreenLightSoftwareTimer, 0);													// stop the green timer since red is on
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <TrafficLightTask+0x17c>)
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	2300      	movs	r3, #0
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2300      	movs	r3, #0
 800351a:	2200      	movs	r2, #0
 800351c:	2103      	movs	r1, #3
 800351e:	f7fe fe1f 	bl	8002160 <xTimerGenericCommand>
				xTimerChangePeriod(xRedLightSoftwareTimer, redSpeed / portTICK_PERIOD_MS, 0 );     			// starts the red timer again
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <TrafficLightTask+0x180>)
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	89ba      	ldrh	r2, [r7, #12]
 8003528:	2300      	movs	r3, #0
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2300      	movs	r3, #0
 800352e:	2104      	movs	r1, #4
 8003530:	f7fe fe16 	bl	8002160 <xTimerGenericCommand>
			}
		}

		lastSpeed = newSpeed; // update local speed variable
 8003534:	893b      	ldrh	r3, [r7, #8]
 8003536:	81fb      	strh	r3, [r7, #14]

		vTaskDelay(500);
 8003538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800353c:	f7fd ff7e 	bl	800143c <vTaskDelay>
		xQueuePeek(xFlowQueue, &newSpeed, 0); 							// Get the current speed from the queue
 8003540:	e74c      	b.n	80033dc <TrafficLightTask+0x10>
 8003542:	bf00      	nop
 8003544:	20001eb8 	.word	0x20001eb8
 8003548:	20001ec4 	.word	0x20001ec4
 800354c:	20001ebc 	.word	0x20001ebc
 8003550:	20001ec0 	.word	0x20001ec0

08003554 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800355e:	bf00      	nop
}
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <main>:
int queueSetup(void);
void taskSetup(void);
void timerSetup(void);

int main(void)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b085      	sub	sp, #20
 8003580:	af02      	add	r7, sp, #8
	middlewareSetup();
 8003582:	f000 f831 	bl	80035e8 <middlewareSetup>
	if (queueSetup() != 0) return 1;
 8003586:	f000 f89f 	bl	80036c8 <queueSetup>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <main+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e01f      	b.n	80035d4 <main+0x58>
	taskSetup();
 8003594:	f000 f8e6 	bl	8003764 <taskSetup>
	timerSetup();
 8003598:	f000 f922 	bl	80037e0 <timerSetup>

	// Start the system
	GPIO_SetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_GREEN);      // Green light on
 800359c:	2104      	movs	r1, #4
 800359e:	480f      	ldr	r0, [pc, #60]	; (80035dc <main+0x60>)
 80035a0:	f7ff fbb0 	bl	8002d04 <GPIO_SetBits>
	xTimerStart( xGreenLightSoftwareTimer, 0 );                     // Start the green light software timer
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <main+0x64>)
 80035a6:	681c      	ldr	r4, [r3, #0]
 80035a8:	f7fe f872 	bl	8001690 <xTaskGetTickCount>
 80035ac:	4602      	mov	r2, r0
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2300      	movs	r3, #0
 80035b4:	2101      	movs	r1, #1
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7fe fdd2 	bl	8002160 <xTimerGenericCommand>

	uint16_t color = 1;
 80035bc:	2301      	movs	r3, #1
 80035be:	80fb      	strh	r3, [r7, #6]
	xQueueOverwrite(xLightQueue, &color);							// Update the light status queue
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <main+0x68>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	1db9      	adds	r1, r7, #6
 80035c6:	2302      	movs	r3, #2
 80035c8:	2200      	movs	r2, #0
 80035ca:	f7fd f9f9 	bl	80009c0 <xQueueGenericSend>

	vTaskStartScheduler(); 											// Start the task scheduler
 80035ce:	f7fd ff69 	bl	80014a4 <vTaskStartScheduler>

	return 0;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd90      	pop	{r4, r7, pc}
 80035dc:	40020800 	.word	0x40020800
 80035e0:	20001ec4 	.word	0x20001ec4
 80035e4:	20001eb4 	.word	0x20001eb4

080035e8 <middlewareSetup>:

/*
 * Sets up the GPIO and ADC for interaction with the shift register, traffic light, and potentiometer
 */
void middlewareSetup ( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08c      	sub	sp, #48	; 0x30
 80035ec:	af00      	add	r7, sp, #0
	// Declare the GPIO structures
	GPIO_InitTypeDef      SHIFT_GPIO_InitStructure;
	GPIO_InitTypeDef      TRAFFIC_GPIO_InitStructure;

	// Enable the GPIOC clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80035ee:	2101      	movs	r1, #1
 80035f0:	2004      	movs	r0, #4
 80035f2:	f7ff fba5 	bl	8002d40 <RCC_AHB1PeriphClockCmd>

	// Configure the shift register GPIO
    SHIFT_GPIO_InitStructure.GPIO_Pin   = SHIFT_RESET | SHIFT_CLOCK | SHIFT_DATA;
 80035f6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
    SHIFT_GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    SHIFT_GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003602:	2300      	movs	r3, #0
 8003604:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    SHIFT_GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    SHIFT_GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    GPIO_Init(SHIFT_PORT, &SHIFT_GPIO_InitStructure);
 8003614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003618:	4619      	mov	r1, r3
 800361a:	4829      	ldr	r0, [pc, #164]	; (80036c0 <middlewareSetup+0xd8>)
 800361c:	f7ff fae4 	bl	8002be8 <GPIO_Init>

    // Configure the traffic light GPIO
    TRAFFIC_GPIO_InitStructure.GPIO_Pin   = TRAFFIC_LIGHT_RED | TRAFFIC_LIGHT_YELLOW | TRAFFIC_LIGHT_GREEN;
 8003620:	2307      	movs	r3, #7
 8003622:	623b      	str	r3, [r7, #32]
    TRAFFIC_GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    TRAFFIC_GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    TRAFFIC_GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    GPIO_Init(TRAFFIC_LIGHT_PORT, &TRAFFIC_GPIO_InitStructure);
 8003636:	f107 0320 	add.w	r3, r7, #32
 800363a:	4619      	mov	r1, r3
 800363c:	4820      	ldr	r0, [pc, #128]	; (80036c0 <middlewareSetup+0xd8>)
 800363e:	f7ff fad3 	bl	8002be8 <GPIO_Init>
	// Declare the ADC structures
	ADC_InitTypeDef       ADC_InitStructure;
	GPIO_InitTypeDef      ADC_GPIO_InitStructure;

	// Enable GPIO and ADC clocks for ADC
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003642:	2101      	movs	r1, #1
 8003644:	2004      	movs	r0, #4
 8003646:	f7ff fb7b 	bl	8002d40 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800364a:	2101      	movs	r1, #1
 800364c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003650:	f7ff fb96 	bl	8002d80 <RCC_APB2PeriphClockCmd>

    // Initialize ADC
    ADC_GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_3;
 8003654:	2308      	movs	r3, #8
 8003656:	603b      	str	r3, [r7, #0]
    ADC_GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003658:	2303      	movs	r3, #3
 800365a:	713b      	strb	r3, [r7, #4]
    ADC_GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOC, &ADC_GPIO_InitStructure);
 8003660:	463b      	mov	r3, r7
 8003662:	4619      	mov	r1, r3
 8003664:	4816      	ldr	r0, [pc, #88]	; (80036c0 <middlewareSetup+0xd8>)
 8003666:	f7ff fabf 	bl	8002be8 <GPIO_Init>

    // Configure the ADC
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 800366a:	2300      	movs	r3, #0
 800366c:	737b      	strb	r3, [r7, #13]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
    ADC_InitStructure.ADC_ExternalTrigConv = DISABLE;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
    ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
    ADC_InitStructure.ADC_NbrOfConversion = 1;
 800367a:	2301      	movs	r3, #1
 800367c:	773b      	strb	r3, [r7, #28]
    ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	733b      	strb	r3, [r7, #12]
    ADC_Init(ADC1, &ADC_InitStructure);
 8003686:	f107 0308 	add.w	r3, r7, #8
 800368a:	4619      	mov	r1, r3
 800368c:	480d      	ldr	r0, [pc, #52]	; (80036c4 <middlewareSetup+0xdc>)
 800368e:	f7ff f825 	bl	80026dc <ADC_Init>
    ADC_Cmd(ADC1, ENABLE);
 8003692:	2101      	movs	r1, #1
 8003694:	480b      	ldr	r0, [pc, #44]	; (80036c4 <middlewareSetup+0xdc>)
 8003696:	f7ff f877 	bl	8002788 <ADC_Cmd>
    ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1, ADC_SampleTime_84Cycles);
 800369a:	2304      	movs	r3, #4
 800369c:	2201      	movs	r2, #1
 800369e:	210d      	movs	r1, #13
 80036a0:	4808      	ldr	r0, [pc, #32]	; (80036c4 <middlewareSetup+0xdc>)
 80036a2:	f7ff f88d 	bl	80027c0 <ADC_RegularChannelConfig>

    // Reset the clock and set the reset pin to clear the shift register
    GPIO_ResetBits(GPIOC, GPIO_Pin_7);
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	4805      	ldr	r0, [pc, #20]	; (80036c0 <middlewareSetup+0xd8>)
 80036aa:	f7ff fb3a 	bl	8002d22 <GPIO_ResetBits>
    GPIO_SetBits(GPIOC, GPIO_Pin_8);
 80036ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036b2:	4803      	ldr	r0, [pc, #12]	; (80036c0 <middlewareSetup+0xd8>)
 80036b4:	f7ff fb26 	bl	8002d04 <GPIO_SetBits>
}
 80036b8:	bf00      	nop
 80036ba:	3730      	adds	r7, #48	; 0x30
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40020800 	.word	0x40020800
 80036c4:	40012000 	.word	0x40012000

080036c8 <queueSetup>:

/*
 * Initializes the necessary queues
 */
int queueSetup ( void )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	// Setup the shared queues
    xCarQueue = xQueueCreate(1, sizeof(uint16_t));
 80036cc:	2200      	movs	r2, #0
 80036ce:	2102      	movs	r1, #2
 80036d0:	2001      	movs	r0, #1
 80036d2:	f7fd f91d 	bl	8000910 <xQueueGenericCreate>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b1c      	ldr	r3, [pc, #112]	; (800374c <queueSetup+0x84>)
 80036da:	601a      	str	r2, [r3, #0]
    if(xCarQueue == NULL) return 1; 				// Exit, failed to create
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <queueSetup+0x84>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <queueSetup+0x20>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e02e      	b.n	8003746 <queueSetup+0x7e>
    vQueueAddToRegistry(xCarQueue, "xCarQueue");
 80036e8:	4b18      	ldr	r3, [pc, #96]	; (800374c <queueSetup+0x84>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4918      	ldr	r1, [pc, #96]	; (8003750 <queueSetup+0x88>)
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd fd16 	bl	8001120 <vQueueAddToRegistry>

    xFlowQueue = xQueueCreate(1, sizeof(uint16_t));
 80036f4:	2200      	movs	r2, #0
 80036f6:	2102      	movs	r1, #2
 80036f8:	2001      	movs	r0, #1
 80036fa:	f7fd f909 	bl	8000910 <xQueueGenericCreate>
 80036fe:	4602      	mov	r2, r0
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <queueSetup+0x8c>)
 8003702:	601a      	str	r2, [r3, #0]
	if(xFlowQueue == NULL) return 1; 				// Exit, failed to create
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <queueSetup+0x8c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <queueSetup+0x48>
 800370c:	2301      	movs	r3, #1
 800370e:	e01a      	b.n	8003746 <queueSetup+0x7e>
	vQueueAddToRegistry(xFlowQueue, "xFlowQueue");
 8003710:	4b10      	ldr	r3, [pc, #64]	; (8003754 <queueSetup+0x8c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4910      	ldr	r1, [pc, #64]	; (8003758 <queueSetup+0x90>)
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd fd02 	bl	8001120 <vQueueAddToRegistry>

	xLightQueue = xQueueCreate(1, sizeof(uint16_t));
 800371c:	2200      	movs	r2, #0
 800371e:	2102      	movs	r1, #2
 8003720:	2001      	movs	r0, #1
 8003722:	f7fd f8f5 	bl	8000910 <xQueueGenericCreate>
 8003726:	4602      	mov	r2, r0
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <queueSetup+0x94>)
 800372a:	601a      	str	r2, [r3, #0]
	if(xLightQueue == NULL) return 1; 				// Exit, failed to create
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <queueSetup+0x94>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <queueSetup+0x70>
 8003734:	2301      	movs	r3, #1
 8003736:	e006      	b.n	8003746 <queueSetup+0x7e>
	vQueueAddToRegistry(xLightQueue, "xLightQueue");
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <queueSetup+0x94>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4908      	ldr	r1, [pc, #32]	; (8003760 <queueSetup+0x98>)
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd fcee 	bl	8001120 <vQueueAddToRegistry>

	return 0;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20001eb0 	.word	0x20001eb0
 8003750:	08003c94 	.word	0x08003c94
 8003754:	20001eb8 	.word	0x20001eb8
 8003758:	08003ca0 	.word	0x08003ca0
 800375c:	20001eb4 	.word	0x20001eb4
 8003760:	08003cac 	.word	0x08003cac

08003764 <taskSetup>:

/*
 * Initializes the tasks for traffic flow, creation, display, and traffic light display
 */
void taskSetup ( void )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af02      	add	r7, sp, #8
	// Create the 4 tasks to be used
	xTaskCreate( TrafficFlowAdjustmentTask , "FlowAdjust",	configMINIMAL_STACK_SIZE ,	NULL ,	(tskIDLE_PRIORITY + 1)	,   NULL);
 800376a:	2300      	movs	r3, #0
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	2301      	movs	r3, #1
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2300      	movs	r3, #0
 8003774:	2282      	movs	r2, #130	; 0x82
 8003776:	4912      	ldr	r1, [pc, #72]	; (80037c0 <taskSetup+0x5c>)
 8003778:	4812      	ldr	r0, [pc, #72]	; (80037c4 <taskSetup+0x60>)
 800377a:	f7fd fd2d 	bl	80011d8 <xTaskCreate>
	xTaskCreate( TrafficCreatorTask        , "Creator"   ,	configMINIMAL_STACK_SIZE ,	NULL ,	(tskIDLE_PRIORITY + 2)	, 	NULL);
 800377e:	2300      	movs	r3, #0
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	2302      	movs	r3, #2
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2300      	movs	r3, #0
 8003788:	2282      	movs	r2, #130	; 0x82
 800378a:	490f      	ldr	r1, [pc, #60]	; (80037c8 <taskSetup+0x64>)
 800378c:	480f      	ldr	r0, [pc, #60]	; (80037cc <taskSetup+0x68>)
 800378e:	f7fd fd23 	bl	80011d8 <xTaskCreate>
	xTaskCreate( TrafficLightTask          , "Light"	 ,	configMINIMAL_STACK_SIZE ,	NULL ,	(tskIDLE_PRIORITY + 2)	,  	NULL);
 8003792:	2300      	movs	r3, #0
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	2302      	movs	r3, #2
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2300      	movs	r3, #0
 800379c:	2282      	movs	r2, #130	; 0x82
 800379e:	490c      	ldr	r1, [pc, #48]	; (80037d0 <taskSetup+0x6c>)
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <taskSetup+0x70>)
 80037a2:	f7fd fd19 	bl	80011d8 <xTaskCreate>
	xTaskCreate( TrafficDisplayTask        , "Display"   ,	configMINIMAL_STACK_SIZE ,	NULL ,	(tskIDLE_PRIORITY)		,	NULL);
 80037a6:	2300      	movs	r3, #0
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	2300      	movs	r3, #0
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	2300      	movs	r3, #0
 80037b0:	2282      	movs	r2, #130	; 0x82
 80037b2:	4909      	ldr	r1, [pc, #36]	; (80037d8 <taskSetup+0x74>)
 80037b4:	4809      	ldr	r0, [pc, #36]	; (80037dc <taskSetup+0x78>)
 80037b6:	f7fd fd0f 	bl	80011d8 <xTaskCreate>
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	08003cb8 	.word	0x08003cb8
 80037c4:	080031bd 	.word	0x080031bd
 80037c8:	08003cc4 	.word	0x08003cc4
 80037cc:	0800323d 	.word	0x0800323d
 80037d0:	08003ccc 	.word	0x08003ccc
 80037d4:	080033cd 	.word	0x080033cd
 80037d8:	08003cd4 	.word	0x08003cd4
 80037dc:	08002fb5 	.word	0x08002fb5

080037e0 <timerSetup>:

/*
 * Initializes the software timers used for the traffic lights
 */
void timerSetup ()
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af02      	add	r7, sp, #8
	// Create the software timers for the traffic lights
	xGreenLightSoftwareTimer  = xTimerCreate("GreenLightTimer" ,   6000 / portTICK_PERIOD_MS , 	pdFALSE, ( void * ) 0,	vGreenLightTimerCallback);
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <timerSetup+0x54>)
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	2200      	movs	r2, #0
 80037ee:	f241 7170 	movw	r1, #6000	; 0x1770
 80037f2:	4811      	ldr	r0, [pc, #68]	; (8003838 <timerSetup+0x58>)
 80037f4:	f7fe fc66 	bl	80020c4 <xTimerCreate>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <timerSetup+0x5c>)
 80037fc:	601a      	str	r2, [r3, #0]
	xYellowLightSoftwareTimer = xTimerCreate("YellowLightTimer",   2000 / portTICK_PERIOD_MS  , pdFALSE, ( void * ) 0,	vYellowLightTimerCallback);
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <timerSetup+0x60>)
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2300      	movs	r3, #0
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800380a:	480e      	ldr	r0, [pc, #56]	; (8003844 <timerSetup+0x64>)
 800380c:	f7fe fc5a 	bl	80020c4 <xTimerCreate>
 8003810:	4602      	mov	r2, r0
 8003812:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <timerSetup+0x68>)
 8003814:	601a      	str	r2, [r3, #0]
	xRedLightSoftwareTimer    = xTimerCreate("RedLightTimer"   ,   6000 / portTICK_PERIOD_MS  , pdFALSE, ( void * ) 0,	vRedLightTimerCallback);
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <timerSetup+0x6c>)
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	2200      	movs	r2, #0
 800381e:	f241 7170 	movw	r1, #6000	; 0x1770
 8003822:	480b      	ldr	r0, [pc, #44]	; (8003850 <timerSetup+0x70>)
 8003824:	f7fe fc4e 	bl	80020c4 <xTimerCreate>
 8003828:	4602      	mov	r2, r0
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <timerSetup+0x74>)
 800382c:	601a      	str	r2, [r3, #0]
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	080032dd 	.word	0x080032dd
 8003838:	08003cdc 	.word	0x08003cdc
 800383c:	20001ec4 	.word	0x20001ec4
 8003840:	08003335 	.word	0x08003335
 8003844:	08003cec 	.word	0x08003cec
 8003848:	20001ec0 	.word	0x20001ec0
 800384c:	08003375 	.word	0x08003375
 8003850:	08003d00 	.word	0x08003d00
 8003854:	20001ebc 	.word	0x20001ebc

08003858 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 800385c:	e7fe      	b.n	800385c <vApplicationMallocFailedHook+0x4>

0800385e <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003868:	e7fe      	b.n	8003868 <vApplicationStackOverflowHook+0xa>

0800386a <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003870:	f7fc ffd8 	bl	8000824 <xPortGetFreeHeapSize>
 8003874:	4603      	mov	r3, r0
 8003876:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8003878:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003884:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003886:	e003      	b.n	8003890 <LoopCopyDataInit>

08003888 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800388a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800388c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800388e:	3104      	adds	r1, #4

08003890 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003890:	480a      	ldr	r0, [pc, #40]	; (80038bc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003894:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003896:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003898:	d3f6      	bcc.n	8003888 <CopyDataInit>
  ldr  r2, =_sbss
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800389c:	e002      	b.n	80038a4 <LoopFillZerobss>

0800389e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800389e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038a0:	f842 3b04 	str.w	r3, [r2], #4

080038a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80038a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038a8:	d3f9      	bcc.n	800389e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038aa:	f000 f84b 	bl	8003944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ae:	f000 f8fb 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038b2:	f7ff fe63 	bl	800357c <main>
  bx  lr    
 80038b6:	4770      	bx	lr
  ldr  r3, =_sidata
 80038b8:	08003d30 	.word	0x08003d30
  ldr  r0, =_sdata
 80038bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038c0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80038c4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80038c8:	20001ecc 	.word	0x20001ecc

080038cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038cc:	e7fe      	b.n	80038cc <ADC_IRQHandler>

080038ce <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	af00      	add	r7, sp, #0
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <HardFault_Handler+0x4>

080038e2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80038e6:	e7fe      	b.n	80038e6 <MemManage_Handler+0x4>

080038e8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <BusFault_Handler+0x4>

080038ee <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80038f2:	e7fe      	b.n	80038f2 <UsageFault_Handler+0x4>

080038f4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <_sbrk>:
 return len;
}


void * _sbrk(int32_t incr)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <_sbrk+0x38>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <_sbrk+0x16>
		heap_end = & end;
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <_sbrk+0x38>)
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <_sbrk+0x3c>)
 8003918:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <_sbrk+0x38>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <_sbrk+0x38>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <_sbrk+0x38>)
 800392a:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 800392c:	68fb      	ldr	r3, [r7, #12]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20001de8 	.word	0x20001de8
 8003940:	20001ecc 	.word	0x20001ecc

08003944 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <SystemInit+0x60>)
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <SystemInit+0x60>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003958:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <SystemInit+0x64>)
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <SystemInit+0x64>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <SystemInit+0x64>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800396a:	4a0f      	ldr	r2, [pc, #60]	; (80039a8 <SystemInit+0x64>)
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <SystemInit+0x64>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003978:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <SystemInit+0x64>)
 800397c:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <SystemInit+0x68>)
 800397e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003980:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <SystemInit+0x64>)
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <SystemInit+0x64>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <SystemInit+0x64>)
 800398e:	2200      	movs	r2, #0
 8003990:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003992:	f000 f80d 	bl	80039b0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003996:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <SystemInit+0x60>)
 8003998:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800399c:	609a      	str	r2, [r3, #8]
#endif
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	e000ed00 	.word	0xe000ed00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	24003010 	.word	0x24003010

080039b0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	2300      	movs	r3, #0
 80039bc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80039be:	4a36      	ldr	r2, [pc, #216]	; (8003a98 <SetSysClock+0xe8>)
 80039c0:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <SetSysClock+0xe8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80039ca:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <SetSysClock+0xe8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3301      	adds	r3, #1
 80039d8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <SetSysClock+0x38>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80039e6:	d1f0      	bne.n	80039ca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80039e8:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <SetSysClock+0xe8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80039f4:	2301      	movs	r3, #1
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	e001      	b.n	80039fe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80039fa:	2300      	movs	r3, #0
 80039fc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d142      	bne.n	8003a8a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003a04:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <SetSysClock+0xe8>)
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <SetSysClock+0xe8>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003a10:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <SetSysClock+0xec>)
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <SetSysClock+0xec>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a1a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <SetSysClock+0xe8>)
 8003a1e:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <SetSysClock+0xe8>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003a24:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <SetSysClock+0xe8>)
 8003a26:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <SetSysClock+0xe8>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a2e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <SetSysClock+0xe8>)
 8003a32:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <SetSysClock+0xe8>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003a3a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003a3c:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <SetSysClock+0xe8>)
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <SetSysClock+0xf0>)
 8003a40:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <SetSysClock+0xe8>)
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <SetSysClock+0xe8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003a4e:	bf00      	nop
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <SetSysClock+0xe8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f9      	beq.n	8003a50 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <SetSysClock+0xf4>)
 8003a5e:	f240 6205 	movw	r2, #1541	; 0x605
 8003a62:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003a64:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <SetSysClock+0xe8>)
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <SetSysClock+0xe8>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003a70:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <SetSysClock+0xe8>)
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <SetSysClock+0xe8>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f043 0302 	orr.w	r3, r3, #2
 8003a7a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003a7c:	bf00      	nop
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <SetSysClock+0xe8>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d1f9      	bne.n	8003a7e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	07405408 	.word	0x07405408
 8003aa4:	40023c00 	.word	0x40023c00

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4e0d      	ldr	r6, [pc, #52]	; (8003ae0 <__libc_init_array+0x38>)
 8003aac:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003aae:	1ba4      	subs	r4, r4, r6
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	2500      	movs	r5, #0
 8003ab4:	42a5      	cmp	r5, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	4e0b      	ldr	r6, [pc, #44]	; (8003ae8 <__libc_init_array+0x40>)
 8003aba:	4c0c      	ldr	r4, [pc, #48]	; (8003aec <__libc_init_array+0x44>)
 8003abc:	f000 f928 	bl	8003d10 <_init>
 8003ac0:	1ba4      	subs	r4, r4, r6
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	2500      	movs	r5, #0
 8003ac6:	42a5      	cmp	r5, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ad0:	4798      	blx	r3
 8003ad2:	3501      	adds	r5, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ada:	4798      	blx	r3
 8003adc:	3501      	adds	r5, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08003d28 	.word	0x08003d28
 8003ae4:	08003d28 	.word	0x08003d28
 8003ae8:	08003d28 	.word	0x08003d28
 8003aec:	08003d2c 	.word	0x08003d2c

08003af0 <memcpy>:
 8003af0:	b510      	push	{r4, lr}
 8003af2:	1e43      	subs	r3, r0, #1
 8003af4:	440a      	add	r2, r1
 8003af6:	4291      	cmp	r1, r2
 8003af8:	d100      	bne.n	8003afc <memcpy+0xc>
 8003afa:	bd10      	pop	{r4, pc}
 8003afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b04:	e7f7      	b.n	8003af6 <memcpy+0x6>

08003b06 <memset>:
 8003b06:	4402      	add	r2, r0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d100      	bne.n	8003b10 <memset+0xa>
 8003b0e:	4770      	bx	lr
 8003b10:	f803 1b01 	strb.w	r1, [r3], #1
 8003b14:	e7f9      	b.n	8003b0a <memset+0x4>
	...

08003b18 <rand>:
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <rand+0x68>)
 8003b1a:	b510      	push	{r4, lr}
 8003b1c:	681c      	ldr	r4, [r3, #0]
 8003b1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b20:	b9d3      	cbnz	r3, 8003b58 <rand+0x40>
 8003b22:	2018      	movs	r0, #24
 8003b24:	f000 f832 	bl	8003b8c <malloc>
 8003b28:	f243 330e 	movw	r3, #13070	; 0x330e
 8003b2c:	63a0      	str	r0, [r4, #56]	; 0x38
 8003b2e:	8003      	strh	r3, [r0, #0]
 8003b30:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8003b34:	8043      	strh	r3, [r0, #2]
 8003b36:	f241 2334 	movw	r3, #4660	; 0x1234
 8003b3a:	8083      	strh	r3, [r0, #4]
 8003b3c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8003b40:	80c3      	strh	r3, [r0, #6]
 8003b42:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8003b46:	8103      	strh	r3, [r0, #8]
 8003b48:	2305      	movs	r3, #5
 8003b4a:	8143      	strh	r3, [r0, #10]
 8003b4c:	230b      	movs	r3, #11
 8003b4e:	8183      	strh	r3, [r0, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	2300      	movs	r3, #0
 8003b54:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003b58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b5a:	480a      	ldr	r0, [pc, #40]	; (8003b84 <rand+0x6c>)
 8003b5c:	690a      	ldr	r2, [r1, #16]
 8003b5e:	694b      	ldr	r3, [r1, #20]
 8003b60:	4c09      	ldr	r4, [pc, #36]	; (8003b88 <rand+0x70>)
 8003b62:	4350      	muls	r0, r2
 8003b64:	fb04 0003 	mla	r0, r4, r3, r0
 8003b68:	fba2 2304 	umull	r2, r3, r2, r4
 8003b6c:	3201      	adds	r2, #1
 8003b6e:	4403      	add	r3, r0
 8003b70:	f143 0300 	adc.w	r3, r3, #0
 8003b74:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003b78:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000018 	.word	0x20000018
 8003b84:	5851f42d 	.word	0x5851f42d
 8003b88:	4c957f2d 	.word	0x4c957f2d

08003b8c <malloc>:
 8003b8c:	4b02      	ldr	r3, [pc, #8]	; (8003b98 <malloc+0xc>)
 8003b8e:	4601      	mov	r1, r0
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	f000 b803 	b.w	8003b9c <_malloc_r>
 8003b96:	bf00      	nop
 8003b98:	20000018 	.word	0x20000018

08003b9c <_malloc_r>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	1ccd      	adds	r5, r1, #3
 8003ba0:	f025 0503 	bic.w	r5, r5, #3
 8003ba4:	3508      	adds	r5, #8
 8003ba6:	2d0c      	cmp	r5, #12
 8003ba8:	bf38      	it	cc
 8003baa:	250c      	movcc	r5, #12
 8003bac:	2d00      	cmp	r5, #0
 8003bae:	4606      	mov	r6, r0
 8003bb0:	db01      	blt.n	8003bb6 <_malloc_r+0x1a>
 8003bb2:	42a9      	cmp	r1, r5
 8003bb4:	d903      	bls.n	8003bbe <_malloc_r+0x22>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	6033      	str	r3, [r6, #0]
 8003bba:	2000      	movs	r0, #0
 8003bbc:	bd70      	pop	{r4, r5, r6, pc}
 8003bbe:	f000 f85b 	bl	8003c78 <__malloc_lock>
 8003bc2:	4a23      	ldr	r2, [pc, #140]	; (8003c50 <_malloc_r+0xb4>)
 8003bc4:	6814      	ldr	r4, [r2, #0]
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	b991      	cbnz	r1, 8003bf0 <_malloc_r+0x54>
 8003bca:	4c22      	ldr	r4, [pc, #136]	; (8003c54 <_malloc_r+0xb8>)
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	b91b      	cbnz	r3, 8003bd8 <_malloc_r+0x3c>
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 f841 	bl	8003c58 <_sbrk_r>
 8003bd6:	6020      	str	r0, [r4, #0]
 8003bd8:	4629      	mov	r1, r5
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f000 f83c 	bl	8003c58 <_sbrk_r>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d126      	bne.n	8003c32 <_malloc_r+0x96>
 8003be4:	230c      	movs	r3, #12
 8003be6:	6033      	str	r3, [r6, #0]
 8003be8:	4630      	mov	r0, r6
 8003bea:	f000 f846 	bl	8003c7a <__malloc_unlock>
 8003bee:	e7e4      	b.n	8003bba <_malloc_r+0x1e>
 8003bf0:	680b      	ldr	r3, [r1, #0]
 8003bf2:	1b5b      	subs	r3, r3, r5
 8003bf4:	d41a      	bmi.n	8003c2c <_malloc_r+0x90>
 8003bf6:	2b0b      	cmp	r3, #11
 8003bf8:	d90f      	bls.n	8003c1a <_malloc_r+0x7e>
 8003bfa:	600b      	str	r3, [r1, #0]
 8003bfc:	50cd      	str	r5, [r1, r3]
 8003bfe:	18cc      	adds	r4, r1, r3
 8003c00:	4630      	mov	r0, r6
 8003c02:	f000 f83a 	bl	8003c7a <__malloc_unlock>
 8003c06:	f104 000b 	add.w	r0, r4, #11
 8003c0a:	1d23      	adds	r3, r4, #4
 8003c0c:	f020 0007 	bic.w	r0, r0, #7
 8003c10:	1ac3      	subs	r3, r0, r3
 8003c12:	d01b      	beq.n	8003c4c <_malloc_r+0xb0>
 8003c14:	425a      	negs	r2, r3
 8003c16:	50e2      	str	r2, [r4, r3]
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	428c      	cmp	r4, r1
 8003c1c:	bf0d      	iteet	eq
 8003c1e:	6863      	ldreq	r3, [r4, #4]
 8003c20:	684b      	ldrne	r3, [r1, #4]
 8003c22:	6063      	strne	r3, [r4, #4]
 8003c24:	6013      	streq	r3, [r2, #0]
 8003c26:	bf18      	it	ne
 8003c28:	460c      	movne	r4, r1
 8003c2a:	e7e9      	b.n	8003c00 <_malloc_r+0x64>
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	6849      	ldr	r1, [r1, #4]
 8003c30:	e7ca      	b.n	8003bc8 <_malloc_r+0x2c>
 8003c32:	1cc4      	adds	r4, r0, #3
 8003c34:	f024 0403 	bic.w	r4, r4, #3
 8003c38:	42a0      	cmp	r0, r4
 8003c3a:	d005      	beq.n	8003c48 <_malloc_r+0xac>
 8003c3c:	1a21      	subs	r1, r4, r0
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f000 f80a 	bl	8003c58 <_sbrk_r>
 8003c44:	3001      	adds	r0, #1
 8003c46:	d0cd      	beq.n	8003be4 <_malloc_r+0x48>
 8003c48:	6025      	str	r5, [r4, #0]
 8003c4a:	e7d9      	b.n	8003c00 <_malloc_r+0x64>
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	bf00      	nop
 8003c50:	20001dec 	.word	0x20001dec
 8003c54:	20001df0 	.word	0x20001df0

08003c58 <_sbrk_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4c06      	ldr	r4, [pc, #24]	; (8003c74 <_sbrk_r+0x1c>)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4605      	mov	r5, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	f7ff fe4e 	bl	8003904 <_sbrk>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_sbrk_r+0x1a>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_sbrk_r+0x1a>
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	20001ec8 	.word	0x20001ec8

08003c78 <__malloc_lock>:
 8003c78:	4770      	bx	lr

08003c7a <__malloc_unlock>:
 8003c7a:	4770      	bx	lr
 8003c7c:	454c4449 	.word	0x454c4449
 8003c80:	00000000 	.word	0x00000000
 8003c84:	20726d54 	.word	0x20726d54
 8003c88:	00637653 	.word	0x00637653
 8003c8c:	51726d54 	.word	0x51726d54
 8003c90:	00000000 	.word	0x00000000
 8003c94:	72614378 	.word	0x72614378
 8003c98:	75657551 	.word	0x75657551
 8003c9c:	00000065 	.word	0x00000065
 8003ca0:	6f6c4678 	.word	0x6f6c4678
 8003ca4:	65755177 	.word	0x65755177
 8003ca8:	00006575 	.word	0x00006575
 8003cac:	67694c78 	.word	0x67694c78
 8003cb0:	75517468 	.word	0x75517468
 8003cb4:	00657565 	.word	0x00657565
 8003cb8:	776f6c46 	.word	0x776f6c46
 8003cbc:	756a6441 	.word	0x756a6441
 8003cc0:	00007473 	.word	0x00007473
 8003cc4:	61657243 	.word	0x61657243
 8003cc8:	00726f74 	.word	0x00726f74
 8003ccc:	6867694c 	.word	0x6867694c
 8003cd0:	00000074 	.word	0x00000074
 8003cd4:	70736944 	.word	0x70736944
 8003cd8:	0079616c 	.word	0x0079616c
 8003cdc:	65657247 	.word	0x65657247
 8003ce0:	67694c6e 	.word	0x67694c6e
 8003ce4:	69547468 	.word	0x69547468
 8003ce8:	0072656d 	.word	0x0072656d
 8003cec:	6c6c6559 	.word	0x6c6c6559
 8003cf0:	694c776f 	.word	0x694c776f
 8003cf4:	54746867 	.word	0x54746867
 8003cf8:	72656d69 	.word	0x72656d69
 8003cfc:	00000000 	.word	0x00000000
 8003d00:	4c646552 	.word	0x4c646552
 8003d04:	74686769 	.word	0x74686769
 8003d08:	656d6954 	.word	0x656d6954
 8003d0c:	00000072 	.word	0x00000072

08003d10 <_init>:
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	bf00      	nop
 8003d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d16:	bc08      	pop	{r3}
 8003d18:	469e      	mov	lr, r3
 8003d1a:	4770      	bx	lr

08003d1c <_fini>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr
